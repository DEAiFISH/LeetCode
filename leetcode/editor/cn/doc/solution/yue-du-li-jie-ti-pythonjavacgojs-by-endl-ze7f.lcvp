根据题意，只要有数字满足 $\textit{fronts}[i]=\textit{backs}[i]$，那么 $\textit{fronts}[i]$ 绝对不可能是答案，否则 $\textit{fronts}[i]$ 或者 $\textit{backs}[i]$ 作为背面的数字可以满足要求，取最小值作为答案。

我们可以先遍历一遍数组，找到满足 $\textit{fronts}[i]=\textit{backs}[i]$ 的数字，存入哈希表 $\textit{forbidden}$ 中。然后再次遍历数组，找到不在 $\textit{forbidden}$ 中的数字，取最小值作为答案。如果所有数字都在 $\textit{forbidden}$ 中，返回 $0$。

* [sol-Python3]

```py
class Solution:
    def flipgame(self, fronts: List[int], backs: List[int]) -> int:
        forbidden = {x for x, y in zip(fronts, backs) if x == y}
        return min((x for x in fronts + backs if x not in forbidden), default=0)
```

* [sol-Java]

```java
class Solution {
    public int flipgame(int[] fronts, int[] backs) {
        var forbidden = new HashSet<Integer>();
        for (int i = 0; i < fronts.length; i++)
            if (fronts[i] == backs[i])
                forbidden.add(fronts[i]);

        int ans = Integer.MAX_VALUE;
        for (int x : fronts) if (!forbidden.contains(x)) ans = Math.min(ans, x);
        for (int x : backs)  if (!forbidden.contains(x)) ans = Math.min(ans, x);
        return ans == Integer.MAX_VALUE ? 0 : ans;
    }
}
```

* [sol-C++]

```cpp
class Solution {
public:
    int flipgame(vector<int> &fronts, vector<int> &backs) {
        unordered_set<int> forbidden;
        for (int i = 0; i < fronts.size(); i++)
            if (fronts[i] == backs[i])
                forbidden.insert(fronts[i]);

        int ans = INT_MAX;
        for (int x: fronts) if (!forbidden.count(x)) ans = min(ans, x);
        for (int x: backs)  if (!forbidden.count(x)) ans = min(ans, x);
        return ans == INT_MAX ? 0 : ans;
    }
};
```

* [sol-Go]

```go
func flipgame(fronts []int, backs []int) int {
    forbidden := map[int]bool{}
    for i, x := range fronts {
        if x == backs[i] {
            forbidden[x] = true
        }
    }

    ans := math.MaxInt
    for i, x := range fronts {
        if !forbidden[x] {
            ans = min(ans, x)
        }
        if !forbidden[backs[i]] {
            ans = min(ans, backs[i])
        }
    }
    if ans == math.MaxInt {
        return 0
    }
    return ans
}

func min(a, b int) int { if b < a { return b }; return a }
```

* [sol-JavaScript]

```js
var flipgame = function (fronts, backs) {
    let forbidden = new Set();
    for (let i = 0; i < fronts.length; i++)
        if (fronts[i] === backs[i])
            forbidden.add(fronts[i]);

    let ans = Number.MAX_SAFE_INTEGER;
    for (const x of fronts) if (!forbidden.has(x)) ans = Math.min(ans, x);
    for (const x of backs)  if (!forbidden.has(x)) ans = Math.min(ans, x);
    return ans === Number.MAX_SAFE_INTEGER ? 0 : ans;
};
```

#### 复杂度分析

- 时间复杂度：$\mathcal{O}(n)$，其中 $n$ 为 $\textit{fronts}$ 的长度。
- 空间复杂度：$\mathcal{O}(n)$。

[往期每日一题题解（按 tag 分类）](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)

欢迎关注 [B站@灵茶山艾府](https://space.bilibili.com/206214)
