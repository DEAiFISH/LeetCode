//Áªô‰Ω†‰∏Ä‰∏™Â§ßÂ∞è‰∏∫ m x n ÔºåÁî±Ëã•Âπ≤ 0 Âíå 1 ÁªÑÊàêÁöÑ‰∫åÁª¥ÁΩëÊ†º grid ÔºåÂÖ∂‰∏≠ 1 Ë°®Á§∫ÈôÜÂú∞Ôºå 0 Ë°®Á§∫Ê∞¥„ÄÇÂ≤õÂ±ø Áî±Ê∞¥Âπ≥ÊñπÂêëÊàñÁ´ñÁõ¥ÊñπÂêë‰∏äÁõ∏ÈÇªÁöÑ 1 ÔºàÈôÜ
//Âú∞ÔºâËøûÊé•ÂΩ¢Êàê„ÄÇ 
//
// Â¶ÇÊûú ÊÅ∞Â•ΩÂè™Êúâ‰∏ÄÂ∫ßÂ≤õÂ±ø ÔºåÂàôËÆ§‰∏∫ÈôÜÂú∞ÊòØ ËøûÈÄöÁöÑ ÔºõÂê¶ÂàôÔºåÈôÜÂú∞Â∞±ÊòØ ÂàÜÁ¶ªÁöÑ „ÄÇ 
//
// ‰∏ÄÂ§©ÂÜÖÔºåÂèØ‰ª•Â∞Ü ‰ªª‰ΩïÂçï‰∏™ ÈôÜÂú∞ÂçïÂÖÉÔºà1ÔºâÊõ¥Êîπ‰∏∫Ê∞¥ÂçïÂÖÉÔºà0Ôºâ„ÄÇ 
//
// ËøîÂõû‰ΩøÈôÜÂú∞ÂàÜÁ¶ªÁöÑÊúÄÂ∞ëÂ§©Êï∞„ÄÇ 
//
// 
//
// Á§∫‰æã 1Ôºö 
// 
// 
//ËæìÂÖ•Ôºögrid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]
//ËæìÂá∫Ôºö2
//Ëß£ÈáäÔºöËá≥Â∞ëÈúÄË¶Å 2 Â§©ÊâçËÉΩÂæóÂà∞ÂàÜÁ¶ªÁöÑÈôÜÂú∞„ÄÇ
//Â∞ÜÈôÜÂú∞ grid[1][1] Âíå grid[0][2] Êõ¥Êîπ‰∏∫Ê∞¥ÔºåÂæóÂà∞‰∏§‰∏™ÂàÜÁ¶ªÁöÑÂ≤õÂ±ø„ÄÇ 
//
// Á§∫‰æã 2Ôºö 
// 
// 
//ËæìÂÖ•Ôºögrid = [[1,1]]
//ËæìÂá∫Ôºö2
//Ëß£ÈáäÔºöÂ¶ÇÊûúÁΩëÊ†º‰∏≠ÈÉΩÊòØÊ∞¥Ôºå‰πüËÆ§‰∏∫ÊòØÂàÜÁ¶ªÁöÑ ([[1,1]] -> [[0,0]])Ôºå0 Â≤õÂ±ø„ÄÇ
// 
//
// 
//
// ÊèêÁ§∫Ôºö 
//
// 
// m == grid.length 
// n == grid[i].length 
// 1 <= m, n <= 30 
// grid[i][j] ‰∏∫ 0 Êàñ 1 
// 
//
// Related Topics Ê∑±Â∫¶‰ºòÂÖàÊêúÁ¥¢ ÂπøÂ∫¶‰ºòÂÖàÊêúÁ¥¢ Êï∞ÁªÑ Áü©Èòµ Âº∫ËøûÈÄöÂàÜÈáè 
// üëç 52 üëé 0


//leetcode submit region begin(Prohibit modification and deletion)
class Solution {
    int[] dx = {0, 1, 0, -1};
    int[] dy = {1, 0, -1, 0};

    public int minDays(int[][] grid) {
        int n = grid.length, m = grid[0].length;
        // Â≤õÂ±øÊï∞Èáè‰∏ç‰∏∫ 1ÔºåÈôÜÂú∞Â∑≤ÁªèÂàÜÁ¶ª
        if (count(grid, n, m) != 1) {
            return 0;
        }
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (grid[i][j] != 0) {
                    grid[i][j] = 0;
                    if (count(grid, n, m) != 1) {
                        // Êõ¥Êîπ‰∏Ä‰∏™ÈôÜÂú∞ÂçïÂÖÉ‰∏∫Ê∞¥ÂçïÂÖÉÂêéÈôÜÂú∞ÂàÜÁ¶ª
                        return 1;
                    }
                    grid[i][j] = 1;
                }
            }
        }
        return 2;
    }

    public int count(int[][] grid, int n, int m) {
        int cnt = 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (grid[i][j] == 1) {
                    cnt++;
                    dfs(i, j, grid, n, m);
                }
            }
        }
        // ËøòÂéü
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (grid[i][j] == 2) {
                    grid[i][j] = 1;
                }
            }
        }
        return cnt;
    }

    public void dfs(int x, int y, int[][] grid, int n, int m) {
        grid[x][y] = 2;
        for (int i = 0; i < 4; ++i) {
            int tx = dx[i] + x;
            int ty = dy[i] + y;
            if (tx < 0 || tx >= n || ty < 0 || ty >= m || grid[tx][ty] != 1) {
                continue;
            }
            dfs(tx, ty, grid, n, m);
        }
    }
}
//leetcode submit region end(Prohibit modification and deletion)
