[120. 三角形最小路径和](https://leetcode.cn/problems/triangle/) /  [剑指 Offer II 100. 三角形中最小路径之和](https://leetcode.cn/problems/IlPe0q/)

## 方案1 自顶向下求解

![image.png](https://pic.leetcode.cn/1666723775-UQBllT-image.png)

- 问题：求自顶向底部的最短路径和。
- 状态定义：$f(i,j) = $ 自顶 $(0,0)$ 到当前位置 $(i,j)$ 的最短路径和。
- 每一步只能移动到下一行中**相邻**的结点上：

$$
(i-1,j-1)\;或\;(i-1,j)\; \to \;(i,j)\; \to \;(i+1,j)\;或\;(i+1,j+1)
$$

- 转移方程：**上一行可到达当前位置的节点中的最小路径和，再加上当前位置的值**，就是当前位置的最小路径和。

$$
f(i,j) = min\;\{ \;f(i-1,j-1)\;,\;\; f(i-1,j)\; \} \; +\;  arr[i][j]
$$

此外三角形的两个腰上的位置，都只有其上面的一个节点可以到达。
$$
f(i,0)=f(i-1,0)+arr[i][0]\;\;\;\;f(i,i)=f(i-1,i-1)+arr[i][i]
$$

- 初始值：顶位置 $(0,0)$ 的最小路径和就是顶位置的值。

$$
f(0,0)=arr[0][0]
$$

- 返回值：最底层的数组的所有位置的路径和中的最小值。

$$
min \;\{\; f(row-1,0),\; f(row-1,1), \;... ,\; f(row-1,j),\;...\;\}
$$

- 数据结构：每一个位置都有自己的状态即自己的最小路径和。所以我们的数据结构和题目给的二维数组一致。可以直接利用题目给的，也可以开辟新的。

* cpp

```cpp
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) 
    {
        int row = triangle.size();

        // 我们不开辟新空间，直接遍历并修改二维数组，所以不必设置初始值
        for (int i = 1; i < row; ++i)
        {
            for (int j = 0; j <= i; ++j)
            {
                // 当前位置的最小路径和，应该是上一层的位置的最小路径和+当前位置的值。
                // 求出来我们是直接放到原始数组中的，不要混淆。
                // 由于上面的位置已经被遍历修改过，已经是该位置的最小路径和，所以直接加等。
                if (j == 0)
                    triangle[i][j] += triangle[i-1][j]; 
                else if (j == i)
                    triangle[i][j] += triangle[i-1][j-1];
                else
                    triangle[i][j] += min(triangle[i-1][j-1], triangle[i-1][j]);
            }
        }

        // 求返回值：最底层的数组中的最小值
        int minSum = triangle[row - 1][0];
        for (auto e : triangle[row - 1])
        {
            if (minSum > e) minSum = e;
        }
        return minSum;
    }
};
```

## 方案2 自下而上求解

> 显然我们这回定义的状态和方案一是相反的。

- 状态定义：$f(i,j) = $ 从 $(i,j)$ 到达最后一行的最小路径和。

> 既然我们从下而上求解，那么我们就只能利用下面位置的值。

- 转移方程：下一层两个能到达的位置的路径和的最小值，再加上当前位置的值，就是当前位置的最小路径和。

$$
f(i,j)\;=\;min\;\{\; f(i+1,j) ,\; f(i+1,j+1) \; \} \; + \; arr[i][j]
$$

这样做的优点是，每一个需要求解的点，都有两个下一个位置，普适性更高，且不用考虑最底层的点。

- 初始值：最后一行的点都是初始值，不需要发生改变。

$$
f(row-1,j)=arr[row-1][j]
$$

- 返回值：顶位置 $(0,0)$ 的最小路径和。

$$
return \;\;f(0,0)
$$

* cpp

```cpp
class Solution {
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        int row = triangle.size();
		//自下而上遍历
        for (int i = row - 2; i >= 0; --i) // 最后一行作初始值 不参与遍历
        {
            for (int j = 0; j <= i; ++j)
            {
                triangle[i][j] += min(triangle[i+1][j], triangle[i+1][j+1]);
            }
        }

        return triangle[0][0];
    }
};
```

点个赞吧求求了🥹，孩子也想在力扣生存下去，呜呜...

