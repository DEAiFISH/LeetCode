# 正则表达式匹配

**方法：动态规划**

* 

```
class Solution {
    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();

        boolean[][] f = new boolean[m + 1][n + 1]; // f[i][j] 表示 s 的前 i 个字符与 p 中的前 j 个字符是否能够匹配。判断的时候，应该判断s[i-1]和p[j-1]，因为字符串下标从0开始
        // f[0][0] 表示 两个空字符串是否能够匹配。初始化条件：能匹配。
        f[0][0] = true;
        for (int i = 0; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (p.charAt(j - 1) == '*') { // p的第j个字符为'*'
                    f[i][j] = f[i][j - 2]; // 不匹配字符，将该组合扔掉，不再进行匹配。
                    if (matches(s, p, i, j - 1)) { // 匹配，则有匹配一次和任意次
                        f[i][j] = f[i][j] || f[i - 1][j]; 
                        // 匹配 s 末尾的一个字符，将该字符扔掉，而该组合还可以继续进行匹配；
                    }
                } else {
                    if (matches(s, p, i, j)) {
                        f[i][j] = f[i - 1][j - 1];
                    }
                }
            }
        }
        return f[m][n];
    }

    public boolean matches(String s, String p, int i, int j) {
        if (i == 0) {
            return false;
        }
        if (p.charAt(j - 1) == '.') {
            return true;
        }
        return s.charAt(i - 1) == p.charAt(j - 1);
    }
}
```

