## 模拟

最终结果只有「从 `0` 开始的交替串」和「从 `1` 开始的交替串」两种。

对于一个长度为 `n` 的未知序列 `A` 而言，假设我们需要花费 `cnt` 次操作将其变为「从 `0` 开始的交替串」，那么我们想要将其变为「从 `1` 开始的交替串」则需要 `n - cnt` 次操作：原本操作的 `cnt` 个位置不能动，而原本没操作的位置则都需要翻转，从而确保两种交替串对应位均相反。

代码：

* []

```Java
class Solution {
    public int minOperations(String s) {
        int n = s.length(), cnt = 0;
        for (int i = 0; i < n; i++) cnt += (s.charAt(i) - '0') ^ (i & 1);
        return Math.min(cnt, n - cnt);
    }
}
```

* []

```TypeScript
function minOperations(s: string): number {
    let n = s.length, cnt = 0
    for (let i = 0; i < n; i++) cnt += (s.charCodeAt(i) - '0'.charCodeAt(0)) ^ (i & 1)
    return Math.min(cnt, n - cnt)
}
```

* []

```Python
class Solution:
    def minOperations(self, s: str) -> int:
        n, cnt = len(s), 0
        for i, c in enumerate(s):
            cnt += (ord(c) - ord('0')) ^ (i & 1)
        return min(cnt, n - cnt)
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://acoier.com/oimg/gzh-qrcode.webp)，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
