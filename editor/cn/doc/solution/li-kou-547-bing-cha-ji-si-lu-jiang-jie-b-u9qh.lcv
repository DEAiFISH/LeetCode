## ËßÜÈ¢ëËÆ≤Ëß£

![...5-cbbe-ec2-1d219.mov](https://leetcode.cn/problems/number-of-provinces/solution/li-kou-547-bing-cha-ji-si-lu-jiang-jie-b-u9qh/3ebd8d63-5bbb-4564-99d7-597e7f904b40)

## ÈÖçÂ•ó‰ª£Á†Å

* []

```Java
class Solution {
    // Union Find
    // @Áà±Â≠¶‰π†ÁöÑÈ•≤ÂÖªÂëò
    public int findCircleNum(int[][] isConnected) {
        if (isConnected == null || isConnected.length == 0) {
            return 0;
        }

        int n = isConnected.length;
        UnionFind uf = new UnionFind(n);
        for(int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (isConnected[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }

        return uf.getCount();
    }

    class UnionFind {
        int root[];
        int rank[];
        int count;

        UnionFind(int size) {
            root = new int[size];
            rank = new int[size];
            count = size;
            for (int i = 0; i < size; i++) {
                root[i] = i;
                rank[i] = 1;
            }
        }

        int find(int x) {
            if (x == root[x]) {
                return x;
            }
            return root[x] = find(root[x]);
        }

        void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);
            if (rootX != rootY) {
                if (rank[rootX] > rank[rootY]) {
                    root[rootY] = rootX;
                } else if (rank[rootX] < rank[rootY]) {
                    root[rootX] = rootY;
                } else {
                    root[rootY] = rootX;
                    rank[rootX] += 1;
                }
                count--;
            }
        };

        int getCount() {
            return count;
        }
    }
}
```

> ‰ª•‰∏äÂÜÖÂÆπÂá∫Ëá™„Ää[Âõæ](https://leetcode.cn/leetbook/detail/graph/)„Äã
> „Äå7 Â§ß‰∏éÂõæÁõ∏ÂÖ≥ÁöÑÊ†∏ÂøÉÁü•ËØÜ + 5 Áßç‰∏éÂõæÁõ∏ÂÖ≥ÁöÑÁÆóÊ≥ï„ÄçÂ∞ΩÂú®üëá
> [![image.png](https://pic.leetcode.cn/1668596540-uMIsXv-image.png)](https://leetcode.cn/leetbook/detail/graph/)

