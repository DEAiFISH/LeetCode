## 哈希表

一个简单的思路是按[1. 两数之和](/problems/two-sum/)的思路，一边遍历一边用哈希表记录遍历过的元素，同时在遍历过程中检查是否哈希表存在 $k - x$ 即可判断，而遍历顺序可以自由选择，下面代码使用递归前序遍历

* []

```Python
class Solution:
    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:
        s = set()

        def dfs(root):
            if not root:
                return False
            else:
                if k - root.val in s:
                    return True
                s.add(root.val)
                if dfs(root.left) or dfs(root.right):
                    return True
            return False
        
        return dfs(root)
```

* []

```Java
class Solution {
    Set<Integer> s = new HashSet<>();
    public boolean findTarget(TreeNode root, int k) {
        if (root != null) {
            if (s.contains(k - root.val)) return true;
            s.add(root.val);
            return findTarget(root.left, k) || findTarget(root.right, k);
        }
        return false;
    }
}
```

* []

```Cpp
class Solution {
public:
    unordered_set<int> s;
    bool findTarget(TreeNode* root, int k) {
        if (root != nullptr) {
            if (s.find(k - root->val) != s.end()) return true;
            s.emplace(root->val);
            return findTarget(root->left, k) || findTarget(root->right, k);
        }
        return false;
    }
};
```

- 时间复杂度：$O(n)$
- 空间复杂度：$O(n)$

---

## 双指针

注意到题目给出的是 **BST 即二叉搜索树**，前一种方法并没有用到该性质。

二叉搜索树的一个重要性质是其**中序遍历是递增有序**的，而且在本题中是严格递增的

而若对一个**递增有序的序列**计算两数之和，一个更优的解法是双指针，可以参考[167. 两数之和 II - 输入有序数组](/problems/two-sum-ii-input-array-is-sorted/)。

可以设置两个指针，分别由前向后和由后向前进行迭代，如果是 Python 语言可以通过迭代器很容易实现递归算法，而没有语言特性的话也可以使用迭代法实现。

- 下面代码中 Python 使用递归方法，Java和C++使用迭代方法

* []

```Python
class Solution:
    def findTarget(self, root: Optional[TreeNode], k: int) -> bool:

        def pre_dfs(root):
            if root:
                yield from pre_dfs(root.left)
                yield root.val
                yield from pre_dfs(root.right)
        
        def reverse_dfs(root):
            if root:
                yield from reverse_dfs(root.right)
                yield root.val
                yield from reverse_dfs(root.left)
        
        p, q = pre_dfs(root), reverse_dfs(root)
        x, y = next(p), next(q)
        while x < y:
            z = x + y
            if z == k:
                return True
            elif z < k:
                x = next(p)
            else:
                y = next(q)
        return False

```

* []

```Java
class Solution {
    public boolean findTarget(TreeNode root, int k) {
        Deque<TreeNode> s1 = new ArrayDeque<>(), s2 = new ArrayDeque<>();
        for (TreeNode cur = root; cur != null; cur = cur.left) s1.addLast(cur);
        for (TreeNode cur = root; cur != null; cur = cur.right) s2.addLast(cur);
        TreeNode x = s1.pollLast(), y = s2.pollLast();
        while (x.val < y.val) {
            int z = x.val + y.val;
            if (z == k) return true;
            else if (z < k) {
                for (TreeNode nxt = x.right; nxt != null; nxt = nxt.left) s1.addLast(nxt);
                x = s1.pollLast();
            }
            else {
                for (TreeNode nxt = y.left; nxt != null; nxt = nxt.right) s2.addLast(nxt);
                y = s2.pollLast();
            }
        }
        return false;
    }
}
```

* []

```Cpp
class Solution {
public:
    bool findTarget(TreeNode* root, int k) {
        stack<TreeNode*> s1, s2;
        for (TreeNode* cur = root; cur != nullptr; cur = cur->left) s1.push(cur);
        for (TreeNode* cur = root; cur != nullptr; cur = cur->right) s2.push(cur);
        TreeNode *x = s1.top(), *y = s2.top();
        s1.pop(); s2.pop();
        while (x->val < y->val) {
            int z = x->val + y->val;
            if (z == k) return true;
            else if (z < k) {
                for (TreeNode *nxt = x->right; nxt != nullptr; nxt = nxt->left) s1.push(nxt);
                x = s1.top(); s1.pop();
            }
            else {
                for (TreeNode *nxt = y->left; nxt != nullptr; nxt = nxt->right) s2.push(nxt);
                y = s2.top(); s2.pop();
            }
        }
        return false;
    }
};
```

- 时间复杂度：$O(n)$
- 空间复杂度：$O(n)$

