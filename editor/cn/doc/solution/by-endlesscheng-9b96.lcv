[视频讲解](https://www.bilibili.com/video/BV1rS4y1s721)，从 19:30 开始（基于题目 [2376. 统计特殊整数](https://leetcode.cn/problems/count-special-integers/)）。
讲了数位 DP 的通用模板，以及如何使用该模板秒杀相关困难题目。
讲完题目后还讲了一些上分的训练技巧。

---

根据题意，好数中不能有 $3,4,7$，且至少包含 $2,5,6,9$ 中的一个。

将 $n$ 转换成字符串 $s$，定义 $f(i,\textit{hasDiff}, \textit{isLimit}, \textit{isNum})$ 表示构造从左往右第 $i$ 位及其之后数位的合法方案数，其余参数的含义为：

- $\textit{hasDiff}$ 表示前面填的数字是否包含 $2,5,6,9$（至少一个）。
- $\textit{isLimit}$ 表示当前是否受到了 $n$ 的约束。若为真，则第 $i$ 位填入的数字至多为 $s[i]$，否则可以是 $9$。如果在受到约束的情况下填了 $s[i]$，那么后续填入的数字仍会受到 $n$ 的约束。
- $\textit{isNum}$ 表示 $i$ 前面的数位是否填了数字。若为假，则当前位可以跳过（不填数字），或者要填入的数字至少为 $1$；若为真，则要填入的数字可以从 $0$ 开始。

后面两个参数可适用于其它数位 DP 题目。

枚举要填入的数字，具体实现逻辑见代码。**对于本题来说，由于前导零对答案无影响，$\textit{isNum}$ 可以省略。**

下面代码中 Java/C++/Go 只需要记忆化 $(i,\textit{hasDiff})$ 这个状态，因为：

1. 对于一个固定的 $(i,\textit{hasDiff})$，这个状态受到 $\textit{isLimit}$ 的约束在整个递归过程中至多会出现一次，没必要记忆化。
2. 另外，如果只记忆化 $(i,\textit{hasDiff})$，$\textit{dp}$ 数组的含义就变成**在不受到约束时**的合法方案数，所以要在 `!isLimit` 成立时才去记忆化。

#### 附：力扣上的数位 DP 题目

- [233. 数字 1 的个数](https://leetcode.cn/problems/number-of-digit-one/)（[题解](https://leetcode.cn/problems/number-of-digit-one/solution/by-endlesscheng-h9ua/)）
- [面试题 17.06. 2出现的次数](https://leetcode.cn/problems/number-of-2s-in-range-lcci/)（[题解](https://leetcode.cn/problems/number-of-2s-in-range-lcci/solution/by-endlesscheng-x4mf/)）
- [600. 不含连续1的非负整数](https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones/)（[题解](https://leetcode.cn/problems/non-negative-integers-without-consecutive-ones/solution/by-endlesscheng-1egu/)）
- [902. 最大为 N 的数字组合](https://leetcode.cn/problems/numbers-at-most-n-given-digit-set/)（[视频讲解](https://www.bilibili.com/video/BV1rS4y1s721) 中讲了）
- [1012. 至少有 1 位重复的数字](https://leetcode.cn/problems/numbers-with-repeated-digits/)（[题解](https://leetcode.cn/problems/numbers-with-repeated-digits/solution/by-endlesscheng-c5vg/)，包含 $\textit{isNum}$ 的用法）
- [1067. 范围内的数字计数](https://leetcode.cn/problems/digit-count-in-range/)
- [1397. 找到所有好字符串](https://leetcode.cn/problems/find-all-good-strings/)（有难度，需要结合一个知名字符串算法）

更多的题目见我的算法竞赛模板库中的 [dp.go](https://github.com/EndlessCheng/codeforces-go/blob/master/copypasta/dp.go#L1731)（搜索 `数位`）。

* [sol1-Python3]

```py
DIFFS = (0, 0, 1, -1, -1, 1, 1, -1, 0, 1)

class Solution:
    def rotatedDigits(self, n: int) -> int:
        s = str(n)
        @cache
        def f(i: int, has_diff: bool, is_limit: bool) -> int:
            if i == len(s):
                return has_diff  # 只有包含 2/5/6/9 才算一个好数
            res = 0
            up = int(s[i]) if is_limit else 9
            for d in range(0, up + 1):  # 枚举要填入的数字 d
                if DIFFS[d] != -1:  # d 不是 3/4/7
                    res += f(i + 1, has_diff or DIFFS[d], is_limit and d == up)
            return res
        return f(0, False, True)
```

* [sol1-Java]

```java
class Solution {
    static int[] DIFFS = {0, 0, 1, -1, -1, 1, 1, -1, 0, 1};

    char s[];
    int dp[][];

    public int rotatedDigits(int n) {
        s = Integer.toString(n).toCharArray();
        var m = s.length;
        dp = new int[m][2];
        for (var i = 0; i < m; i++) Arrays.fill(dp[i], -1);
        return f(0, 0, true);
    }

    int f(int i, int hasDiff, boolean isLimit) {
        if (i == s.length) return hasDiff; // 只有包含 2/5/6/9 才算一个好数
        if (!isLimit && dp[i][hasDiff] >= 0) return dp[i][hasDiff];
        var res = 0;
        var up = isLimit ? s[i] - '0' : 9;
        for (var d = 0; d <= up; ++d) // 枚举要填入的数字 d
            if (DIFFS[d] != -1) // d 不是 3/4/7
                res += f(i + 1, hasDiff | DIFFS[d], isLimit && d == up);
        if (!isLimit) dp[i][hasDiff] = res;
        return res;
    }
}
```

* [sol1-C++]

```cpp
int diffs[10] = {0, 0, 1, -1, -1, 1, 1, -1, 0, 1};

class Solution {
public:
    int rotatedDigits(int n) {
        auto s = to_string(n);
        int m = s.length(), dp[m][2];
        memset(dp, -1, sizeof(dp));
        function<int(int, bool, bool)> f = [&](int i, bool has_diff, bool is_limit) -> int {
            if (i == m) return has_diff; // 只有包含 2/5/6/9 才算一个好数
            if (!is_limit && dp[i][has_diff] >= 0) return dp[i][has_diff];
            int res = 0;
            int up = is_limit ? s[i] - '0' : 9;
            for (int d = 0; d <= up; ++d) // 枚举要填入的数字 d
                if (diffs[d] != -1) // d 不是 3/4/7
                    res += f(i + 1, has_diff || diffs[d], is_limit && d == up);
            if (!is_limit) dp[i][has_diff] = res;
            return res;
        };
        return f(0, false, true);
    }
};
```

* [sol1-Go]

```go
var diffs = [10]int{0, 0, 1, -1, -1, 1, 1, -1, 0, 1}

func rotatedDigits(n int) int {
	s := strconv.Itoa(n)
	m := len(s)
	dp := make([][2]int, m)
	for i := range dp {
		dp[i] = [2]int{-1, -1}
	}
	var f func(int, int, bool) int
	f = func(i, isDiff int, isLimit bool) (res int) {
		if i == m {
			return isDiff // 只有包含 2/5/6/9 才算一个好数
		}
		if !isLimit {
			dv := &dp[i][isDiff]
			if *dv >= 0 {
				return *dv
			}
			defer func() { *dv = res }()
		}
		up := 9
		if isLimit {
			up = int(s[i] - '0')
		}
		for d := 0; d <= up; d++ { // 枚举要填入的数字 d
			if diffs[d] != -1 { // d 不是 3/4/7
				res += f(i+1, isDiff|diffs[d], isLimit && d == up)
			}
		}
		return
	}
	return f(0, 0, true)
}
```

#### 复杂度分析

- 时间复杂度：$O(\log n)$。
- 空间复杂度：$O(\log n)$。

