## 模拟

根据题意进行模拟即可 : 使用 `a` 和 `b` 记录不同的位置下标，初始值为 `-1`，若「不同位置超过 $2$ 个」或「只有 $1$ 个」直接返回 `false`，若「不存在不同位置」或「不同位置字符相同」，则返回 `true`。

代码：

* []

```Java
class Solution {
    public boolean areAlmostEqual(String s1, String s2) {
        int n = s1.length(), a = -1, b = -1;
        for (int i = 0; i < n; i++) {
            if (s1.charAt(i) == s2.charAt(i)) continue;
            if (a == -1) a = i;
            else if (b == -1) b = i;
            else return false;
        }
        if (a == -1) return true;
        if (b == -1) return false;
        return s1.charAt(a) == s2.charAt(b) && s1.charAt(b) == s2.charAt(a);
    }
}
```

* []

```TypeScript
function areAlmostEqual(s1: string, s2: string): boolean {
    let n = s1.length, a = -1, b = -1
    for (let i = 0; i < n; i++) {
        if (s1[i] == s2[i]) continue
        if (a == -1) a = i
        else if (b == -1) b = i
        else return false
    }
    if (a == -1) return true
    if (b == -1) return false
    return s1[a] == s2[b] && s1[b] == s2[a]
}
```

* []

```Python
class Solution:
    def areAlmostEqual(self, s1: str, s2: str) -> bool:
        n, a, b = len(s1), -1, -1
        for i in range(n):
            if s1[i] == s2[i]:
                continue
            if a == -1:
                a = i
            elif b == -1:
                b = i
            else:
                return False
        if a == -1:
            return True
        if b == -1:
            return False
        return s1[a] == s2[b] and s1[b] == s2[a]
```

* 时间复杂度：$O(n)$
* 空间复杂度：$O(1)$

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
