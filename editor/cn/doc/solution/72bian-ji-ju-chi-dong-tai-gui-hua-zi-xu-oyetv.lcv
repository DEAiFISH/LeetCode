> Problem: [72. 编辑距离](https://leetcode.cn/problems/edit-distance/description/)

[TOC]

# 思路

> 讲述看到这一题的思路

# 解题方法

> 描述你的解题方法

# 复杂度

- 时间复杂度:

> 添加时间复杂度, 示例： $O(n)$

- 空间复杂度:

> 添加空间复杂度, 示例： $O(n)$

# Code

* []

```Java

class Solution {
 public int minDistance(String word1, String word2) {

    int[][] dp = new int[word1.length() + 1][word2.length() + 1];
    
    // 初始化
    for (int i = 1; i <= word1.length(); i++) {
        dp[i][0] =  i;
    }
    for (int j = 1; j <= word2.length(); j++) {
        dp[0][j] = j;
    }

    for (int i = 1; i <= word1.length(); i++) {
        for (int j = 1; j <= word2.length(); j++) {
            // 因为dp数组有效位从1开始
            // 所以当前遍历到的字符串的位置为i-1 | j-1
            if (word1.charAt(i - 1) == word2.charAt(j - 1)) {
                dp[i][j] = dp[i - 1][j - 1];
            } else {
                //一步操作 进行替换
                dp[i][j] = Math.min(Math.min(dp[i - 1][j - 1], dp[i][j - 1]), dp[i - 1][j]) + 1;
            }
        }
    }
     return dp[ word1.length()][word2.length()];
}
}
```

