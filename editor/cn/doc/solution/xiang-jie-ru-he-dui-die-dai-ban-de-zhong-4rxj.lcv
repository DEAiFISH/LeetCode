## 基本思路

**这道题本质上考的是「将迭代版的中序遍历代码」做等价拆分。**

我们知道，中序遍历的基本逻辑是：处理左子树 -> 处理当前节点 -> 处理右子树。

其中迭代做法是利用「栈」进行处理：

1. 先将当前节点的所有左子树压入栈，压到没有为止
2. 将最后一个压入的节点弹出（栈顶元素），加入答案
3. 将当前弹出的节点作为当前节点，重复步骤一

相应的裸题在这里：[94. 二叉树的中序遍历](https://leetcode-cn.com/problems/binary-tree-inorder-traversal/)

中序遍历的迭代代码：

* java

```java
class Solution {
    List<Integer> ans = new ArrayList<>();
    Deque<TreeNode> d = new ArrayDeque<>();
    public List<Integer> inorderTraversal(TreeNode root) {
        while (root != null || !d.isEmpty()) {
            // 步骤 1
            while (root != null) {
                d.addLast(root);
                root = root.left;
            }

            // 步骤 2
            root = d.pollLast();
            ans.add(root.val);

            // 步骤 3
            root = root.right;
        }
        return ans;
    }
}
```

总的来说是这么一个迭代过程：步骤 1 -> 步骤 2 -> 步骤 3 -> 步骤 1 ...

***

## 「中序遍历」代码的「等价拆分」

首先因为 `next()` 方法中我们需要输出一个值，执行的的是「步骤 2」的逻辑，同时我们需要在其前后添加「步骤 1」和「步骤 3」。

另外，我们还有一个 `hasNext()` 要处理，显然 `hasNext()` 应该对应我们的栈是否为空。

为此，我们**需要确保每次输出之后「步骤 1」被及时执行。**

综上，我们应该在初始化时，走一遍「步骤 1」，然后在 `next()` 方法中走「步骤 2」、「步骤 3」和「步骤 1」。

代码（感谢 [@answerer](/u/answerer/) 同学提供的 cpp 代码）：

* []

```java
class BSTIterator {
    Deque<TreeNode> d = new ArrayDeque<>();
    public BSTIterator(TreeNode root) {
        // 步骤 1
        dfsLeft(root);
    }
    
    public int next() {
        // 步骤 2
        TreeNode root = d.pollLast();
        int ans = root.val;
        // 步骤 3
        root = root.right;
        // 步骤 1
        dfsLeft(root);
        return ans;
    }

    void dfsLeft(TreeNode root) {
        while (root != null) {
            d.addLast(root);
            root = root.left;
        }
    }
    
    public boolean hasNext() {
        return !d.isEmpty();
    }
}
```

* []

```cpp
class BSTIterator {
    //使用O(h)，保留二叉树的左子树
    vector <TreeNode *> d;
public:
    BSTIterator(TreeNode* root) {
        dfsLeft(root);
    }
    int next() {
        TreeNode * root = d.back();
        d.pop_back();
        int ans = root->val;
        root = root->right;
        dfsLeft(root);
        return ans;
    }
    void dfsLeft(TreeNode * root) {
         while (root) {
             d.push_back(root);
             root = root->left;
         }
     }
    bool hasNext() {
        return !d.empty();
    }
};
```

* 时间复杂度：由于每个元素都是严格「进栈」和「出栈」一次，复杂度为均摊 $O(1)$
* 空间复杂度：栈内最多保存与深度一致的节点数量，复杂度为 $O(h)$

***

## 进阶

事实上，我们空间复杂度也能做到 $O(1)$，该如何做呢？

***

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

**如有不理解的地方，欢迎你在评论区给我留言，我都会逐一回复 ~**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png) 和 加入我们的[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解
