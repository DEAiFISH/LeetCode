> Problem: [792. 匹配子序列的单词数](https://leetcode.cn/problems/number-of-matching-subsequences/description/)

[TOC]

# Code

* []

```Java

class Solution {
    public int numMatchingSubseq(String s, String[] words) {
        int n = s.length();
        int count = 0;
        Map<Character, List<Integer>> map = new HashMap<>();
        // 用来存放每个字符对应的索引值
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            List<Integer> list = map.getOrDefault(c, new ArrayList<>());
            list.add(i);
            map.put(c, list);
        }
        for (String word : words) {
            int len = word.length();
            boolean flag = true;
            int start = -1;
            for (int i = 0; i < len && flag; i++) {
                char c = word.charAt(i);
                if (!map.containsKey(c)) {
                    flag = false;
                } else {
                    List<Integer> idxs = map.get(c);
                // 如果s中不存在这个字符 或者存在的字符最大索引小于上一个字符的索引就直接返回
                    if (idxs.isEmpty() || idxs.get(idxs.size() - 1) <= start) {
                        flag = false;
                        break;
                    }

                    start = binarySearch(idxs, start);
                }
            }
            if (flag) {
                count++;
            }
        }
        return count;
    }

    public int binarySearch(List<Integer> list, int target) {
        int left = 0, right = list.size() - 1;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (list.get(mid) > target) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return list.get(left);
    }
}
```

