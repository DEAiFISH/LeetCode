> 关于我：微信公众号：**面试官问**，原创高质量面试题，始于面试题，但不止于面试题。【萌新解题】系列文章试图从新人的角度去看待和解决力扣题目。

## 前置知识点

1. Java 中有 4 种不同的整数类型，分别为：
   * 8 位的 byte(-2⁷～2⁷-1)，其中 Byte.MIN_VALUE=-2⁷；Byte.MAX_VALUE=2⁷-1
   * 16 位的 short(-2¹⁵～2¹⁵-1)，其中 Short.MIN_VALUE=-2¹⁵，Short.MAX_VALUE=2¹⁵-1
   * 32位的int(-2³¹～2³¹-1)，其中 Integer.MIN_VALUE=-2³¹，Integer.MAX_VALUE=2³¹-1
   * 64位的 long(-2⁶³～2⁶³-1)，其中 Long.MIN_VALUE=-2⁶³，Long.MAX_VALUE=2⁶³-1
2. 整型溢出问题：int 型整数的除法只有一种情况会发生溢出，即 `(-2³¹)/(-1)=2³¹`，而 int 型整数最大值为 `2³¹-1`，2³¹ 已经超出范围。
3. 使用到的英文单词说明：
   * quotient：商
   * dividend：被除数
   * divisor ：除数

## 解题说明

题目要求不能使用乘法、除法和 mod 运算符，那加减乘除就剩加法和减法了，要实现两数相除功能当然就只能选择**减法**了。

按照题目的描述，我们知道，被除数 dividend 和除数 disisor 可能为正数也可能为负数，组合起来有四种可能，即正正，正负，负负，负正，为了简化代码实现和逻辑判断，我们可以先把 dividend 和 disisor 都转换成正正，或者负负，再进行统一的逻辑处理，同时记录下最终结果是正号还是负号。最自然的想法当然是把两者统一为正正进行计算，但如果仔细一想，你会（~~也可能发现不了🐶~~）发现，对于 32 位的整数而言，最小的整数是 -2³¹，最大的整数是 2³¹-1。因此，如果将 -2³¹ 转换为正数则会导致溢出。但**把任意正整数转换成负数是不会发生溢出的**。因此我们最终选择把被除数 dividend 和除数 disisor 统一转换成负数进行处理，代码框架如下所示：

* java

```java
class Solution {
    /**
     * 两数相除
     * 
     * dividend 被除数
     * divisor 除数
     */
    public int divide(int dividend, int divisor) {
        // 处理整型溢出问题，-2³¹=0x80000000
        if (dividend == 0x80000000 && divisor == -1) {
            return Integer.MAX_VALUE;
        }

        // 用来记录除数和被除数是负整数的个数，初始化为2
        int negative = 2;

        // 如果被除数是正整数，则转换成对应的负整数
        if (dividend > 0) {
            negative--;
            dividend = -dividend;
        }

        // 如果除数是正整数，则转换成对应的负整数
        if (divisor > 0) {
            negative--;
            divisor = -divisor;
        }

        int result = divideCore(dividend, divisor);
        return negative == 1 ? -result : result;
    }

    /**
     * 使用减法实现两个负整数的相除操作
     * 
     * dividend：被除数
     * divisor：除数
     */
    private int divideCore(int dividend, int divisor) {
    
    }
}
```

我们接下来继续分析两个**负整数**相除的处理，以 dividend/divisor 为例子，当 dividend 小于等于 divisor 时，我们循环执行 (dividend-divisor) 并计数，示例代码如下所示：

* java

```java
class Solution {
    /**
     * 使用减法实现两个负整数的相除操作
     * 
     * dividend：被除数
     * divisor：除数
     */
    private int divideCore(int dividend, int divisor) {
        // 商
        int quotient = 0;
        while (dividend <= divisor) {
            quotient++;
            dividend -= divisor;
        }
        return quotient;
    }
}
```

再次强调下，这段代码中，我们已经确保 dividend 和 divisor 都是**负整数**，因此，下面描述中，**dividend 也是小于 divisor 的**，思维要转变过来。

上面代码的逻辑没有问题，但当 dividend 远小于 divisor 时，例如 dividend = -(2³¹-1)，而 divisor=-1 时，这段代码执行会花费太长时间，**导致超时**。

因此，我们得想其他改进的办法，**整体思路还是通过减法实现**，但为了缩短相减的次数，我们可以**借鉴二分法的思想**，当被除数 dividend 小于除数 divisor 时，继续比较判断被除数是否小于除数的 2 倍，如果是，则继续判断被除数是否小于除数的 4 倍、8 倍等。如果被除数最多小于除数的 2ᵏ 倍，那么将被除数减去除数的 2ᵏ 倍，然后将剩余的被除数重复前面的步骤。由于每次将除数翻倍，因此优化后的时间复杂度是O（logn）。核心代码如下所示：

* java

```java
class Solution {
    /**
     * 使用减法实现两个负整数的相除操作
     * 
     * dividend：被除数
     * divisor：除数
     */
    private int divideCore(int dividend, int divisor) {
        int ans = 0;
        while (dividend <= divisor) {
            // 商
            int quotient = 1;
            
            // 临时变量
            int value = divisor;

            // 注意题目要求，只能使用加法和减法
            // 因此，通过value+value实现value*2的效果
            while (dividend <= value + value) {
                // quotient 通过自身不断叠加实现乘以 2 的效果
                quotient += quotient;
                // value 通过自身不断叠加实现乘以 2 的效果
                value += value;
            }

            ans += quotient;
            dividend -= value;
        }

        return ans;
    }
}
```

提交代码并执行后，我们发现还是超时：

![b9391707c34fff3687dea66cbefa77af.webp](https://pic.leetcode-cn.com/1658203293-HXOanK-b9391707c34fff3687dea66cbefa77af.webp)

超时一般就是有死循环或者循环太多次，上面代码中，我们可以看到，有两个 while 循环，第一个 while 循环的结束条件 `dividend<=divisor` 应该没什么问题，第二个 while 循环中，`value+value` 有可能会导致整型溢出，所以需要限制一下 value 的大小，value 是负数，而最小的 int 负数是 -2³¹（0x80000000），它的一半是 -2³¹/2=-2³⁰（0xc0000000），因此第二个 while 循环从 `while (dividend <= value + value)` 修改为 `while (value >= 0xc0000000 && dividend <= value + value)` 即可，注意这里 value 是大于等于 0xc0000000，不是小于等于，因为是负数，思维得转变过来。

最终完整的代码如下所示：

* java

```java
class Solution {
    /**
     * 两数相除
     * 
     * dividend 被除数
     * divisor 除数
     */
    public int divide(int dividend, int divisor) {
        // 处理整型溢出问题，-2³¹=0x80000000
        if (dividend == 0x80000000 && divisor == -1) {
            return Integer.MAX_VALUE;
        }

        // 用来记录除数和被除数是负整数的个数，初始化为2
        int negative = 2;

        // 如果被除数是正整数，则转换成对应的负整数
        if (dividend > 0) {
            negative--;
            dividend = -dividend;
        }

        // 如果除数是正整数，则转换成对应的负整数
        if (divisor > 0) {
            negative--;
            divisor = -divisor;
        }

        int result = divideCore(dividend, divisor);
        return negative == 1 ? -result : result;
    }

    /**
     * 使用减法实现两个负整数的相除操作
     * 
     * dividend：被除数
     * divisor：除数
     */
    private int divideCore(int dividend, int divisor) {
        int ans = 0;
        while (dividend <= divisor) {
            // 商
            int quotient = 1;
            
            // 临时变量
            int value = divisor;

            // 注意题目要求，只能使用加法和减法
            // 因此，通过value+value实现value*2的效果
            // 注意这里 value 是大于等于 0xc0000000，不是小于等于，因为是负数，思维得转变过来
            while (value >= 0xc0000000 && dividend <= value + value) {
                // quotient 通过自身不断叠加实现乘以 2 的效果
                quotient += quotient;
                // value 通过自身不断叠加实现乘以 2 的效果
                value += value;
            }

            ans += quotient;
            dividend -= value;
        }

        return ans;
    }
}
```

代码执行结果如下：

![951b71cdc792457b95c2f8be126a370a.webp](https://pic.leetcode-cn.com/1658203264-sspeEg-951b71cdc792457b95c2f8be126a370a.webp)

## 参考资料

* [《剑指 Offer（专项突破版）：数据结构与算法名企面试题精讲》](https://weread.qq.com/web/bookDetail/4e132bc07263ff664e11075)

