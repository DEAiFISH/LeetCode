### 解题思路

1. 如果出现在dislikes中的两个人，已经是同一组的。属于题目规定的false。
2. a，b两人，如果a还没有不喜欢的人，此时，a不喜欢b。如果a有不喜欢的人，b应该和a不喜欢的人合并。b同理。这里合并后续就可能出现1的情况，两个互不待见的人成了一组。

用到并查集的两个方法：`是不是同一组`，`合并`。

并查集：谁是一组的。
`int[] dis = new int[n + 1];` 谁和谁不是一组的。

并查集想练手，撸到最后，附了一些纯并查集问题。

### 代码

* java

```java
class Solution {
	public boolean possibleBipartition(int n, int[][] dislikes) {
		UnionFind union = new UnionFind(n + 1);
		int[] dis = new int[n + 1];
		for (int i = 0; i < dislikes.length; i++) {
			int d[] = dislikes[i];
			int a = d[0], b = d[1];
			if (union.isSameSet(a, b)) {
				return false;
			}
			if (dis[a] == 0) {
				dis[a] = b;
			} else {
				union.union(dis[a], b);
			}
			if (dis[b] == 0) {
				dis[b] = a;
			} else {
				union.union(dis[b], a);
			}
		}
		return true;
	}

	class UnionFind {
		int[] roots;
		int[] sizes;
		int[] stack;

		public UnionFind(int n) {
			roots = new int[n];
			sizes = new int[n];
			for (int i = 0; i < n; i++) {
				roots[i] = i;
				sizes[i] = 1;
			}
			stack = new int[n];
		}

		public int findRoot(int id) {
			int root = 0;
			int p = 0;
			while ((root = roots[id]) != id) {
				stack[p++] = id;
				id = root;
			}
			while (p > 0) {
				roots[stack[--p]] = root;
			}
			return root;
		}

		public boolean isSameSet(int id1, int id2) {
			return findRoot(id1) == findRoot(id2);
		}

		public void union(int id1, int id2) {
			int p1 = this.findRoot(id1);
			int p2 = this.findRoot(id2);
			if (p1 != p2) {
				int size1 = this.sizes[p1];
				int size2 = this.sizes[p2];
				if (size1 < size2) {
					this.roots[p1] = p2;
					this.sizes[p2] = size1 + size2;
					this.sizes[p1] = 0;
				} else {
					this.roots[p2] = p1;
					this.sizes[p1] = size1 + size2;
					this.sizes[p2] = 0;
				}
			}
		}
	}
}
```

<!-- 
执行用时：8 ms, 在所有 Java 提交中击败了98.75%的用户

内存消耗：48.6 MB, 在所有 Java 提交中击败了80.03%的用户

通过测试用例：70 / 70 -->

-------

纯并查集问题

##### [中等] [128. 最长连续序列](https://leetcode-cn.com/problems/longest-consecutive-sequence/) 【并查集】【数组】【哈希表】

##### [中等] 684. 冗余连接【并查集】[[并查集](https://leetcode.cn/problems/redundant-connection/solution/684-rong-yu-lian-jie-by-wa-pian-d-68y6/)] [[684. 冗余连接](https://leetcode.cn/problems/redundant-connection/)]

##### [中等] 721. 账户合并 【深度优先搜索】【广度优先搜索】【并查集】【数组】【字符串】

##### [中等] 1361. 验证二叉树【树】【深度优先搜索】【广度优先搜索】【并查集】【图】【二叉树】[[并查集](https://leetcode-cn.com/problems/validate-binary-tree-nodes/solution/1361-yan-zheng-er-cha-shu-java-zhong-ji-cuolf/)] [[1361. 验证二叉树](https://leetcode-cn.com/problems/validate-binary-tree-nodes/)]

##### [中等] LCS 03. 主题空间【并查集】[[并查集](https://leetcode.cn/problems/YesdPw/solution/lcs-03-zhu-ti-kong-jian-java-by-wa-pian-9muaf/)] [[LCS 03. 主题空间](https://leetcode.cn/problems/YesdPw/)]

