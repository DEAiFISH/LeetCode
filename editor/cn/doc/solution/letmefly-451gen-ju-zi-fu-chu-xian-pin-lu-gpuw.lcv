## 方法一：排序

单字节字符一共有$2^8=256$种，因此我们开辟一个长度为$256$的空间，用于记录每个元素的出现次数

* cpp

```cpp
int cnt[256] = {0};
```

之后遍历一遍字符串，统计每个字符出现的次数

* cpp

```cpp
for (char c : s)
    cnt[c]++;
```

最后，调用系统内置函数，按照“出现次数多的最优先”，“ASCII大的次优先”的顺序进行排序

* cpp

```cpp
sort(s.begin(), s.end(), [&](const char& a, const char& b) {
    return cnt[a] == cnt[b] ? a > b : cnt[a] > cnt[b];
});
```

并返回排序后的字符串即可

* cpp

```cpp
return s;
```

+ 时间复杂度$O(n\log n)$，其中$n$是字符串长度
+ 空间复杂度$O(\log n + C)$，其中$C$是字符集大小，此处取$256$

### AC代码

#### C++

* cpp

```cpp
class Solution {
public:
    string frequencySort(string& s) {
        int cnt[256] = {0};
        for (char c : s)
            cnt[c]++;
        sort(s.begin(), s.end(), [&](const char& a, const char& b) {
            return cnt[a] == cnt[b] ? a > b : cnt[a] > cnt[b];
        });
        return s;
    }
};
```

> 同步发文于CSDN，原创不易，转载请附上[原文链接](https://leetcode.letmefly.xyz/2022/10/21/LeetCode%200451.%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%8E%92%E5%BA%8F/)哦~
> Tisfy：[https://letmefly.blog.csdn.net/article/details/127453657](https://letmefly.blog.csdn.net/article/details/127453657)

