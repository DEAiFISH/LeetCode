## 本题视频讲解

我单独制作了一期视频来讲区间 DP，其中就包括这道题目。

[区间 DP【基础算法精讲 22】](https://www.bilibili.com/video/BV1Gs4y1E7EU/)，制作不易，欢迎点赞！

> APP 用户需要分享到 wx 打开链接。

## 一、记忆化搜索

![1039-cut.png](https://pic.leetcode.cn/1680388698-XNaKai-1039-cut.png)

### 答疑

**问**：区间 DP 有一个「复制一倍，断环成链」的技巧，本题为什么不用这样计算？

**答**：无论如何旋转多边形，无论从哪条边开始计算，得到的结果都是一样的，那么不妨就从 $0$ - $(n-1)$ 这条边开始计算。

* [sol1-Python3]

```py
class Solution:
    def minScoreTriangulation(self, v: List[int]) -> int:
        @cache  # 缓存装饰器，避免重复计算 dfs 的结果
        def dfs(i: int, j: int) -> int:
            if i + 1 == j: return 0  # 只有两个点，无法组成三角形
            return min(dfs(i, k) + dfs(k, j) + v[i] * v[j] * v[k]
                       for k in range(i + 1, j))  # 枚举顶点 k
        return dfs(0, len(v) - 1)
```

* [sol1-Java]

```java
class Solution {
    private int[] v;
    private int[][] memo;

    public int minScoreTriangulation(int[] values) {
        v = values;
        int n = v.length;
        memo = new int[n][n];
        for (int i = 0; i < n; ++i)
            Arrays.fill(memo[i], -1); // -1 表示没有访问过
        return dfs(0, n - 1);
    }

    private int dfs(int i, int j) {
        if (i + 1 == j) return 0; // 只有两个点，无法组成三角形
        if (memo[i][j] != -1) return memo[i][j];
        int res = Integer.MAX_VALUE;
        for (int k = i + 1; k < j; ++k) // 枚举顶点 k
            res = Math.min(res, dfs(i, k) + dfs(k, j) + v[i] * v[j] * v[k]);
        return memo[i][j] = res;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int minScoreTriangulation(vector<int> &v) {
        int n = v.size(), memo[n][n];
        memset(memo, -1, sizeof(memo)); // -1 表示还没有计算过
        function<int(int, int)> dfs = [&](int i, int j) -> int {
            if (i + 1 == j) return 0; // 只有两个点，无法组成三角形
            int &res = memo[i][j]; // 注意这里是引用，下面会直接修改 memo[i][j]
            if (res != -1) return res;
            res = INT_MAX;
            for (int k = i + 1; k < j; ++k) // 枚举顶点 k
                res = min(res, dfs(i, k) + dfs(k, j) + v[i] * v[j] * v[k]);
            return res;
        };
        return dfs(0, n - 1);
    }
};
```

* [sol1-Go]

```go
func minScoreTriangulation(v []int) int {
    n := len(v)
    memo := make([][]int, n)
    for i := range memo {
        memo[i] = make([]int, n)
        for j := range memo[i] {
            memo[i][j] = -1 // -1 表示还没有计算过
        }
    }
    var dfs func(int, int) int
    dfs = func(i, j int) int {
        if i+1 == j { // 只有两个点，无法组成三角形
            return 0
        }
        p := &memo[i][j]
        if *p != -1 {
            return *p
        }
        res := math.MaxInt
        for k := i + 1; k < j; k++ { // 枚举顶点 k
            res = min(res, dfs(i, k)+dfs(k, j)+v[i]*v[j]*v[k])
        }
        *p = res
        return res
    }
    return dfs(0, n-1)
}

func min(a, b int) int { if b < a { return b }; return a }
```

### 复杂度分析

- 时间复杂度：$O(n^3)$，其中 $n$ 为 $\textit{values}$ 的长度。动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题中状态个数等于 $O(n^2)$，单个状态的计算时间为 $O(n)$，因此时间复杂度为 $O(n^3)$。
- 空间复杂度：$O(n^2)$。有 $O(n^2)$ 个状态。

## 二、1:1 翻译成递推

根据视频中讲的，把 $\textit{dfs}$ 改成 $f$ 数组，把递归改成循环就好了。相当于原来是用递归计算每个状态 $(i,j)$，现在改用循环去计算每个状态 $(i,j)$。

状态转移方程和递归**完全一致**：

$$
f[i][j]=\min_{k=i+1}^{j-1}\{f[i][k]+f[k][j]+v[i]\cdot v[j]\cdot v[k]\}
$$

需要注意循环的顺序：

- 由于 $i<k$，$f[i]$ 要能从 $f[k]$ 转移过来，必须先计算出 $f[k]$，所以 $i$ 要**倒序**枚举；
- 由于 $j>k$，$f[i][j]$ 要能从 $f[i][k]$ 转移过来，必须先计算出 $f[i][k]$，所以 $j$ 要**正序**枚举。

* [sol2-Python3]

```py
class Solution:
    def minScoreTriangulation(self, v: List[int]) -> int:
        n = len(v)
        f = [[0] * n for _ in range(n)]
        for i in range(n - 3, -1, -1):
            for j in range(i + 2, n):
                f[i][j] = min(f[i][k] + f[k][j] + v[i] * v[j] * v[k]
                              for k in range(i + 1, j))
        return f[0][-1]
```

* [sol2-Java]

```java
class Solution {
    public int minScoreTriangulation(int[] v) {
        int n = v.length;
        int[][] f = new int[n][n];
        for (int i = n - 3; i >= 0; --i)
            for (int j = i + 2; j < n; ++j) {
                f[i][j] = Integer.MAX_VALUE;
                for (int k = i + 1; k < j; ++k)
                    f[i][j] = Math.min(f[i][j], f[i][k] + f[k][j] + v[i] * v[j] * v[k]);
            }
        return f[0][n - 1];
    }
}
```

* [sol2-C++]

```cpp
class Solution {
public:
    int minScoreTriangulation(vector<int> &v) {
        int n = v.size(), f[n][n];
        memset(f, 0, sizeof(f));
        for (int i = n - 3; i >= 0; --i)
            for (int j = i + 2; j < n; ++j) {
                f[i][j] = INT_MAX;
                for (int k = i + 1; k < j; ++k)
                    f[i][j] = min(f[i][j], f[i][k] + f[k][j] + v[i] * v[j] * v[k]);
            }
        return f[0][n - 1];
    }
};
```

* [sol2-Go]

```go
func minScoreTriangulation(v []int) int {
    n := len(v)
    f := make([][]int, n)
    for i := range f {
        f[i] = make([]int, n)
    }
    for i := n - 3; i >= 0; i-- {
        for j := i + 2; j < n; j++ {
            f[i][j] = math.MaxInt
            for k := i + 1; k < j; k++ {
                f[i][j] = min(f[i][j], f[i][k]+f[k][j]+v[i]*v[j]*v[k])
            }
        }
    }
    return f[0][n-1]
}

func min(a, b int) int { if b < a { return b }; return a }
```

### 复杂度分析

- 时间复杂度：$O(n^3)$，其中 $n$ 为 $\textit{values}$ 的长度。动态规划的时间复杂度 $=$ 状态个数 $\times$ 单个状态的计算时间。本题中状态个数等于 $O(n^2)$，单个状态的计算时间为 $O(n)$，因此时间复杂度为 $O(n^3)$。
- 空间复杂度：$O(n^2)$。有 $O(n^2)$ 个状态。

### 课后作业

- [375. 猜数字大小 II](https://leetcode.cn/problems/guess-number-higher-or-lower-ii/)
- [1312. 让字符串成为回文串的最少插入次数](https://leetcode.cn/problems/minimum-insertion-steps-to-make-a-string-palindrome/)
- [1547. 切棍子的最小成本](https://leetcode.cn/problems/minimum-cost-to-cut-a-stick/)
- [1000. 合并石头的最低成本](https://leetcode.cn/problems/minimum-cost-to-merge-stones/)

---

欢迎关注[【biIibiIi@灵茶山艾府】](https://space.bilibili.com/206214)，高质量算法教学，持续更新中~

附：[每日一题·高质量题解精选](https://github.com/EndlessCheng/codeforces-go/blob/master/leetcode/SOLUTIONS.md)。
