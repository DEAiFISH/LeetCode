## 线性动态规划

股票最大利润 max_profit = 最高卖出价格 max_sale - 最低买入价格 min_buy。

> PS：卖出时间始终在买入时间之后。

那么一段时间内，买卖一次股票的多大利润 profit 是多少呢？可以递归的分解。

前 i 天中获得最大利润有 2 种可能：
- 前 i - 1 天卖出就能获得最大利润；
- 第 i 天卖出才能获得最大利润，此时买入的价格，在事后来看，应该是前 i 天中的股票价格最低点。

所以，有状态转移方程： profit[i] = max{profit[i - 1], prices[i] - min(prices[0:i])}。

在遍历过程中，min(prices[0:i]) 可以用变量 min_buy 来存放，不必每次都来找最小值。

这是一个求最大值的递推式，profit[i] 和 profit[i - 1] 可以用 max_profit 来代替。

* C++

```C++
class Solution {
public:
    int maxProfit(vector<int>& prices) {
        int days = prices.size();
        int min_buy = 1e9, max_profit = 0;
        for (int i = 0; i < days; i++) {
            max_profit = (max_profit > prices[i] - min_buy) ? max_profit : (prices[i] - min_buy);
            min_buy = (min_buy < prices[i]) ? min_buy : prices[i];
        }
        return max_profit;
    }
};
```

