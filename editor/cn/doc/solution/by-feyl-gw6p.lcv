方法一：动态规划

* java

```java
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        int[][] f = new int[m][n];
        int flag = 1; 
        for (int i = 0; i < m; i++) {
            if (obstacleGrid[i][0] == 1) flag = 0;
            f[i][0] = flag;
        }
        flag = 1;
        for (int i = 0; i < n; i++) {
            if (obstacleGrid[0][i] == 1) flag = 0;
            f[0][i] = flag;
        }
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (obstacleGrid[i][j] == 0) f[i][j] = f[i - 1][j] + f[i][j - 1];
                else f[i][j] = 0;
            }
        }
        return f[m - 1][n - 1];
    }
}
```

![image.png](https://pic.leetcode-cn.com/1660535230-WWjKWd-image.png)

方法二：动态规划（滚动数组）

* java

```java
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        int[][] f = new int[2][n];
        int flag = 1; 
        for (int i = 0; i < 2 && i < m; i++) {
            if (obstacleGrid[i][0] == 1) flag = 0;
            f[i][0] = flag;
        }
        flag = 1;
        for (int i = 0; i < n; i++) {
            if (obstacleGrid[0][i] == 1) flag = 0;
            f[0][i] = flag;
        }
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (obstacleGrid[i][j] == 0) {
                    if (j - 1 >= 0) f[i % 2][j] = f[(i - 1) % 2][j] + f[i % 2][j - 1];
                    else f[i % 2][j] = f[(i - 1) % 2][j];
                }
                else f[i % 2][j] = 0;
            }
        }
        return f[(m - 1) % 2][n - 1];
    }
}
```

![image.png](https://pic.leetcode-cn.com/1660540622-nReMFN-image.png)

方法二：动态规划（空间压缩）

* java

```java
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        int[] f = new int[n];
        int flag = 1;
        for (int i = 0; i < n; i++) {
            if (obstacleGrid[0][i] == 1) flag = 0;
            f[i] = flag;
        }
        for (int i = 1; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (obstacleGrid[i][j] == 0) {
                    if (j - 1 >= 0) f[j] +=  f[j - 1];
                } else {
                    f[j] = 0;
                }
            }
        }
        return f[n - 1];
    }
}
```

![image.png](https://pic.leetcode-cn.com/1660536718-jeGIDV-image.png)

方法四：动态规划

* java

```java
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int m = obstacleGrid.length, n = obstacleGrid[0].length;
        int[][] f = new int[m][n];
        f[0][0] = obstacleGrid[0][0] == 1 ? 0 : 1;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (obstacleGrid[i][j] != 1) {
                    if (i > 0 && j > 0) {
                        f[i][j] = f[i - 1][j] + f[i][j - 1];
                    } else if (i > 0) {
                        f[i][j] = f[i - 1][j];
                    } else if (j > 0){
                        f[i][j] = f[i][j - 1];
                    }
                }
            }
        }
        return f[m - 1][n - 1];
    }
}
```

