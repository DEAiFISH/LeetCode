## 建议

链表画个图更好理解(ง •_•)ง

## 代码

* []

```C++
//无虚拟头结点,迭代的 `C++` ：
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(!head||!head->next) return head;//0或1个节点的链表直接返回head
        ListNode *cur=head,*cn=nullptr,*t=head;//cur为当前节点,cn为cur的下一个节点,t为两两交换后的第二个节点
        head=head->next;//未加虚拟头结点,需对头结点进行单独处理:head直接改为新的头节点,即第二个节点
        for(;cur;cur=cur->next){
            cn=cur->next;//cn为cur的下一个节点
            if(cn){//cn不为nullptr
                t->next=cn;//t的指针域next为未交换时的第二个节点,交换后的第一个节点,即节点cn
                t=cur;//t指向未交换时的第一个节点,交换后的第二个节点,即当前节点cur
                cur->next=cn->next;//cur的指针域next为cn的指针域next,即cur的指针域next指向节点cn的下一个节点
                cn->next=cur;//cn的指针域next为当前节点指针cur,即cn的指针域next指向当前节点cur
            }
        }
        return head;//返回头结点
    }
};
```

* []

```C++
//递归 C++ ：
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(!head||!head->next) return head;//当前节点为空或当前节点的下一节点为空,直接返回head
        ListNode *newh=head->next;//新头节点为原头节点的第二个节点,即原头节点为第一个节点,新头节点为第二个节点
        head->next=swapPairs(newh->next);//原头节点的指针域next为第二个节点的指针域next,即原头节点的指针域next指向剩下未两两交换的部分,递归向下将剩下未两两交换的部分进行两两交换
        newh->next=head;//新头节点的指针域next为第一个节点的指针域next,即新头节点的指针域next指向第一个节点,实现两两交换
        return newh;//返回新头节点
    }
};
```

