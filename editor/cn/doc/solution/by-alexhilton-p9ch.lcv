### 解题思路

算法不难，就是按题意去两两交换就可以了，但这题细节多，所以容易WA。

1. 用哨兵节点可以简化逻辑，所以先创建一个哨兵节点dummy
2. 因为交换节点，需要保留前一个节点，这样才能串起来，比如当前要交换节点1，那得知道1前面的节点，否则链表就断了
3. 指针cur指向当前要交换的节点的前一个节点
4. 指针next指向**未交换前的cur的下一个节点**
5. 指针nextNext指向**未交换前**的cur的**下一个下一个节点**
6. 当nextNext为空时，说明只有cur后面一个元素，落单了，就不用交换，直接终止
7. 把next与nextNext的位置互换即可
8. 把cur向前滚动到next，以继续 遍历。需要注意，此时的next指针仍指向原来的**下一个节点**，所以是正确的。

### 代码

* java

```java
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode swapPairs(ListNode head) {
        ListNode dummy = new ListNode(-1, head);
        ListNode cur = dummy;
        while (cur != null && cur.next != null) {
            ListNode next = cur.next;
            ListNode nextNext = cur.next.next;
            if (nextNext == null) {
                break;
            }
            next.next = nextNext.next;
            cur.next = nextNext;
            nextNext.next = next;

            cur = next;
        }

        return dummy.next;
    }
}
```

