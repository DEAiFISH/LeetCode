## 模拟

使用 `l` 和 `r` 两个指针分别圈出每次需要翻转的“理论”范围，每次翻转完更新 `l` 和 `r`，同时注意范围 $[l, r]$ 内不足 $k$ 个的情况（将 `r` 与真实边界 `n - 1`取个 $min$）。

代码：

* []

```Java
class Solution {
    public String reverseStr(String s, int k) {
        char[] cs = s.toCharArray();
        int n = s.length();
        for (int l = 0; l < n; l = l + 2 * k) {
            int r = l + k - 1;
            reverse(cs, l, Math.min(r, n - 1));
        }
        return String.valueOf(cs);
    }
    void reverse(char[] cs, int l, int r) {
        while (l < r) {
            char c = cs[l];
            cs[l] = cs[r];
            cs[r] = c;
            l++; r--;
        }
    }
}
```

* 时间复杂度：$O(n)$
* 空间复杂度：Java 中 `String` 属于不可变，复杂度为 $O(n)$

---

## 特别感谢

**再次感谢昨天有给三叶点 ❤️ 的小伙伴，截止至 2021/08/20 10:00:00 有 $115$ 人，太有排面了，截个全家福纪念一下 🤣 呜呜呜，感谢（其他没有入镜的同学，是在帮忙拿相机拍照啦，也感谢他们 ~**

![image.png](https://pic.leetcode-cn.com/1629424929-fmfBdW-image.png)

---

## 最后

**如果有帮助到你，请给题解点个赞和收藏，让更多的人看到 ~ ("▔□▔)/**

也欢迎你 [关注我](https://oscimg.oschina.net/oscnet/up-19688dc1af05cf8bdea43b2a863038ab9e5.png)（公主号后台回复「送书」即可参与长期看题解学算法送实体书活动）或 加入[「组队打卡」](https://leetcode-cn.com/u/ac_oier/)小群 ，提供写「证明」&「思路」的高质量题解。

所有题解已经加入 [刷题指南](https://github.com/SharingSource/LogicStack-LeetCode/wiki)，欢迎 star 哦 ~
