[详细刷题视频合集](https://xiaochen1024.com/series/6196129fc1553b002e57bef5/6196208ec1553b002e57bef6)      
[刷题笔记](https://xiaochen1024.com/courseware/60b4f11ab1aa91002eb53b18)

##### 动态规划

- 状态：dp[i][j] 三角形i，j位置的最小路径和
- 状态转移方程：dp[i][j] = Math.min(dp[i + 1][j], dp[i + 1][j + 1]) + triangle[i][j];
- 从最后一层开始向上遍历，最小路径和就是下面两个数字中的较小者加上它本身
- 时间复杂度`O(n^2)`，空间复杂`O(n)`

* js

```js
const minimumTotal = (triangle) => {
    const h = triangle.length;
    const dp = new Array(h);// 初始化状态数组
    for (let i = 0; i < h; i++) {
        dp[i] = new Array(triangle[i].length);
    }

    for (let i = h - 1; i >= 0; i--) { //从三角形底向上上遍历
        for (let j = 0; j < triangle[i].length; j++) { //遍历同层
            if (i == h - 1) {  //基本情况 三角形最下一层的状态
                dp[i][j] = triangle[i][j];
            } else { // 状态转移方程，从下一层相邻位置选取一个较小者 + 自身
                dp[i][j] = Math.min(dp[i + 1][j], dp[i + 1][j + 1]) + triangle[i][j];
            }
        }
    }
    return dp[0][0];
};


//状态压缩
const minimumTotal = (triangle) => {
    const bottom = triangle[triangle.length - 1];
    const dp = new Array(bottom.length);
    for (let i = 0; i < dp.length; i++) {//最后一行
        dp[i] = bottom[i];
    }
    for (let i = dp.length - 2; i >= 0; i--) {// 从倒数第二列开始迭代
        for (let j = 0; j < triangle[i].length; j++) {
            dp[j] = Math.min(dp[j], dp[j + 1]) + triangle[i][j];
        }
    }
    return dp[0];
};


```

