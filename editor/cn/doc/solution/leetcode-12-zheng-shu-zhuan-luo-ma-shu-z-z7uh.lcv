此题要将一个整数转为罗马数字，首先我们需要知道一点，就是整数转为罗马数字的规则。

举一个例子，对于数字58，其转成罗马数组其实有多种选择：

* IIII.....  58个I
* VVVVVVVVVVVIII
* XXXXXVIII
* LVIII

那么哪个才是正确的罗马数字呢，其实是`LVIII`，从中我们不难发现一个现象，就是罗马数字总是将最大的数字符号放在左边，对于数字58，其对应的最大罗马数字为L（50），剩下的8，其对应的最大罗马数字为V（5），最后就是III（3），所以最终结果为`LVIII`。

由此我们得到一个思路，就是建立一个数字与罗马数字的对应关系：

* java

```java
int[] nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
String[] roman = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
```

然后总是贪心地拿到最大的罗马数字，看看当前数字是否大于罗马数字对应的数字，如果不大于，就继续找下一个最大的罗马数字，如果大于，就记录一下当前的罗马数字，并减去当前值，剩下的结果再按同样的流程继续寻找。

代码如下：

* java

```java
public static String intToRoman(int num) {
    int[] nums = {1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1};
    String[] roman = {"M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"};
    StringBuilder sb = new StringBuilder();
    do {
        // 寻找不大于num的最大罗马数字
        for (int i = 0; i < nums.length; ++i) {
            while (num >= nums[i]) {
                // 若找到，则减去当前值
                num -= nums[i];
                // 记录当前罗马数字
                sb.append(roman[i]);
            }
        }
    } while (num != 0); // 当num为0时退出循环
    return sb.toString();
}
```

