题解$Vol.8$！
人生中的第一道困难题竟然是一道数学题！
看到很多很多的dalao使用dfs，回溯等高级（对我这个不会树也不会图的菜鸟很高级）算法ac了此题，可是对于我来说，似乎还是数学方法最简单。（我好菜

**解题思路**
我们用$n = 4, k = 9$这组输入数据来说明解法。

需要初始化的东西
- 数组$pers$（鬼知道为什么我起这个名），存储$1!$至$9!$
  （值得注意的一点是，当$n = a$时，对应的全排列共有$a!$种）
  这里给出$pers$的具体内容（我不希望广大扣友和我一样写错）：
  `int pers[10] = {0, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};`
- 数组$choose$，代表区间$[1,n]$的所有整数，每当选取完一个数的时候就删除
- $int$型整数$s$，记录我们当前的进度（也就是$choose$还有多少元素）

操作流程：
- 初始化$pers$和$choose$；
- 进入$while$循环；
- 计算输出字符串的第一位：可以知道前$6$个排列的首位都是$1$（我们可以抽象成对于集合$[2,3,4]$，它的全排列总数，即为$3! = 6$），因此第$9$个排列的首位是$2$（我创建的函数divi就是做这个工作的：求首位）。我们知道，第$9$个排列是首位为$2$的排列中的第$3$个，我们可以用$9$对$6$取模来得出这个数据。同时我们将$choose$中对应的数删除，更改$choose$的大小。
- 计算输出字符串的第二位：此时我们的问题转化为了$n = 3, k = 3$的子问题，按照相同的步骤求解，继续进入子问题...
  ...
- 输出字符串。

接下来是**代码**环节：

* []

```C++
class Solution {
public:
    int divi(int k, int p){
        return k % p == 0 ? k / p : k / p + 1;
    }
    string getPermutation(int n, int k) {
        string back;
        int pers[10] = {0, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880};
        vector<int> choose;
        for(int i = 1; i <= n; i++) choose.push_back(i);
        int s = choose.size();
        while(s > 1){
            back.push_back(choose[divi(k, pers[s - 1]) - 1] + '0');
            choose.erase(choose.begin() + (divi(k, pers[s - 1]) - 1));
            k = k % pers[s - 1] == 0 ? pers[s - 1] : k % pers[s - 1];
            s--;
        }
        back.push_back(choose[0] + '0');
        return back;
    }
};
```

![image.png](https://pic.leetcode-cn.com/1660840278-MQYIfZ-image.png)

刷题快乐！不妨给萌新点个小小的赞和收藏吧！
