这个题目我起初看到的时候，直觉告诉我是全排列，于是写了回溯的全排列代码，但是没想到测试人员很给力，测试用例给的是真大，超时了。这一版的代码就是简单的回溯全排列：

* 

```
List<String> res = new ArrayList<>();
boolean [] used;
public String getPermutation(int n, int k) {
    used = new boolean[n + 1];
    getPermutation(n,k,"");
    return res.get(k - 1);
}
private void getPermutation(int n,int k,String aRes){
    if(aRes.length() == n){
        res.add(aRes);
        return;
    }
    for(int i = 1;i <= n;i++){
        if(used[i])
            continue;
        used[i] = true;
        getPermutation(n,k, aRes + String.valueOf(i));
        used[i] = false;
            }
}
```

既然超时了那就剪一下枝吧，既然我么要求的就是第k个组合，那么就可以对加入结果集合的组合计数，当结果集中的元素已经够了之后就不再进行DFS了。于是剪枝后的代码如下：

* 

```
List<String> res = new ArrayList<>();
   boolean [] used;
   int resCount = 0;
   public String getPermutation(int n, int k) {
       used = new boolean[n + 1];
       getPermutation(n,k,"");
       return res.get(k - 1);
   }
   private void getPermutation(int n,int k,String aRes){
       if(aRes.length() == n){
           res.add(aRes);
           resCount++;
           return;
       }
       for(int i = 1;i <= n;i++){
           if(resCount == k)
               return;
           if(used[i])
               continue;
           used[i] = true;
           getPermutation(n,k, aRes + String.valueOf(i));
           used[i] = false;
                  }
   }
```

这样虽然能通过所有的测试用例但是效率太低了，应该还有优化空间，在仔细看了题目和实例之后，我想到以数组的每一个树作为根节点进行DFS搜索得到的结果数均为（n-1）!，那么我们可以直接跳过其他根节点的DFS，只进行结果所在的子树的DFS搜索。比如我们的结果是“213”，我们只进行以2为根节点的DFS搜索，并且当得到结果时立即结束本次DFS来减少时间的消耗，提高时间效率。

* 

```
class Solution {
    List<String> res = new ArrayList<>();
    boolean [] used;
    int rangeCount,rangeIndex = 0,resCount = 0;
    public String getPermutation(int n, int k) {
        used = new boolean[n + 1];
        rangeCount = getRangeCount(n,k);
        getPermutation(n,k,"");
        return res.get(rangeIndex - 1);
    }
    private void getPermutation(int n,int k,String aRes){
        if(aRes.length() == n){
            res.add(aRes);
            resCount++;//记录结果数量
            return;
        }
        for(int i = 1;i <= n;i++){
            if(k > rangeCount){//对以其他数组元素为根节点的DFS直接跳过
                k -= rangeCount;
                continue;
            }
            rangeIndex = k;
            if(resCount == rangeIndex)//找到了排序为k的元素
                return;
            if(used[i])
                continue;
            used[i] = true;
            getPermutation(n,k, aRes + String.valueOf(i));
            used[i] = false;
            
        }
    }
    private int getRangeCount(int n,int k){//计算DFS子树叶子结点数
        //因为是全排列，所以以数组中每个元素开头作为根节点进行DFS搜索的数量相同，均为(n-1)!
        int factor = 1;
        for(int i = 1;i < n;i++){
            factor *= i;
        }
        return factor;
    }
}
```

果然执行效率好了不少，对于使用回溯解决这道题目我觉得很难再有大的优化了，当然如果有，dalao们也可以留言告诉我。
