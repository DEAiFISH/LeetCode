## 核心思想

区分在p串末尾是的 x* 的情况下，可以匹配s串中的最后一位不
也就是官解中的 f[i−1][j] or f[i][j−2]

## 递归

* 

```
class Solution {
    public boolean isMatch(String s, String p) {
        if (p.isEmpty()) {
            return s.isEmpty();
        }
        // 因为p.isEmpty()判断过了,只判断s
        boolean simpleMatch = !s.isEmpty() && (p.charAt(0) == s.charAt(0) || p.charAt(0) == '.');
        if (p.length() >= 2 && p.charAt(1) == '*') {
            return isMatch(s, p.substring(2))                           // 不可以匹配
                    || (simpleMatch && isMatch(s.substring(1), p));     // 可以匹配
        } else {
            return simpleMatch && isMatch(s.substring(1), p.substring(1));
        }
    }
}
```

## 官方解法

* 

```
class Solution {
    public boolean isMatch1(String s, String p) {
        int m = s.length(), n = p.length();
        boolean[][] dp = new boolean[m + 1][n + 1];
        dp[0][0] = true;
        for (int i = 0; i <= m; i++) {
            for (int j = 1; j <= n; j++) {
                if (p.charAt(j - 1) == '*') {
                    // 不可以匹配
                    dp[i][j] = dp[i][j - 2];
                    // 可以匹配
                    if (simpleMatch(s, p, i, j - 1)) {
                        dp[i][j] = dp[i][j] || dp[i - 1][j];
                    }
                } else {
                    if (simpleMatch(s, p, i, j)) {
                        dp[i][j] = dp[i - 1][j - 1];
                    }
                }
            }
        }
        return dp[m][n];
    }

    public boolean simpleMatch(String s, String p, int i, int j) {
        if (i == 0) {
            return false;
        }
        if (p.charAt(j) == '.') {
            return true;
        }
        return s.charAt(i - 1) == p.charAt(j - 1);
    }
}
```

