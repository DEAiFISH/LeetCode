在学习回溯算法之前，你最好对树的 DFS 熟悉，因为一般的话，回溯的问题基本都可以抽象成树形结构问题

你之所以觉得回溯难，是因为你的树形结构及其算法不熟悉，需要先补一补树相关的知识

#### 1. 将问题抽象成树形结构遍历问题

![..._括号生成：抽象成二叉树遍历问题.mp4](https://leetcode.cn/problems/generate-parentheses/solution/pei-yang-chou-xiang-si-wei-hui-su-jie-fa-7dwu/296b7686-9b33-4ed0-b2b2-7069eec8be4d)

代码如下：

* java

```java
public List<String> generateParenthesis(int n) {
    List<String> res = new ArrayList<>();
    if (n <= 0) return res;
    dfs(n, "", res);
    return res;
}

private void dfs(int n, String path, List<String> res) {
    if (path.length() == 2 * n) {
        res.add(path);
        return;
    }

    dfs(n, path + "(", res);
    dfs(n, path + ")", res);
}
```

#### 2. 剪枝策略

![42_括号生成：剪枝策略.mp4](https://leetcode.cn/problems/generate-parentheses/solution/pei-yang-chou-xiang-si-wei-hui-su-jie-fa-7dwu/e2e55d33-5bd1-458f-b8fe-3ca8a609ecea)

代码如下：

* []

```Java
public List<String> generateParenthesis(int n) {
    List<String> res = new ArrayList<>();
    if (n <= 0) return res;
    dfs(n, "", res, 0, 0);
    return res;
}

private void dfs(int n, String path, List<String> res, int open, int close) {
    if (open > n || close > open) return;

    if (path.length() == 2 * n) {
        res.add(path);
        return;
    }

    dfs(n, path + "(", res, open + 1, close);
    dfs(n, path + ")", res, open, close + 1);
}
```

* []

```C++
public:
    vector<string> generateParenthesis(int n) {
        vector<string> res;
        if (n <= 0) return res;
        dfs(n, "", res, 0, 0);
        return res;
    }

    void dfs(int n, string path, vector<string>& res, int open, int close) {
        if (open > n || close > open) return;

        if (path.length() == 2 * n) {
            res.push_back(path);
            return;
        }

        dfs(n, path + "(", res, open + 1, close);
        dfs(n, path + ")", res, open, close + 1);
    }
```

* []

```python
def generateParenthesis(self, n: int) -> List[str]:
    res = []
    if n <= 0: return res

    def dfs(path, open, close) -> None:
        if open > n or close > open:
            return
        if len(path) == 2 * n:
            res.append(path)
            return

        dfs(path + "(", open + 1, close)
        dfs(path + ")", open, close + 1)

    dfs("", 0, 0)
    return res
```

* []

```javascript
var generateParenthesis = function(n) {
    const res = []
    if (n <= 0) return res

    const dfs = (path, open, close) => {
        if (open > n || close > open) return
        if (path.length == 2 * n) {
            res.push(path)
            return
        }
        dfs(path + "(", open + 1, close)
        dfs(path + ")", open, close + 1)
    }

    dfs("", 0, 0)
    return res
};
```

#### 3. 另一种代码实现

![43_括号生成：另一种实现.mp4](https://leetcode.cn/problems/generate-parentheses/solution/pei-yang-chou-xiang-si-wei-hui-su-jie-fa-7dwu/7e98e5e7-01ba-47be-b2b8-850b21861942)

代码如下：

* []

```java
public List<String> generateParenthesis(int n) {
    List<String> res = new ArrayList<>();
    if (n <= 0) return res;
    dfs(n, "", res, 0, 0);
    return res;
}

private void dfs(int n, String path, List<String> res, int open, int close) {
    if (path.length() == 2 * n) {
        res.add(path);
        return;
    }
    if (open < n) {
        dfs(n, path + "(", res, open + 1, close);
    }
    if (close < open) {
        dfs(n, path + ")", res, open, close + 1);
    }
}
```

* []

```Golang
func generateParenthesis(n int) []string {
    var res = make([]string, 0)
    if n <= 0 {
        return res
    }

    var dfs func(string, int, int)
    dfs = func(path string, open int, close int) {
        if len(path) == 2 * n {
            res = append(res, path)
            return
        }

        if open < n {
            dfs(path + "(", open + 1, close)
        }
        if close < open {
            dfs(path + ")", open, close + 1)
        }
    }

    dfs("", 0, 0)
    return res
}
```

在刷题的时候：

1. 如果你觉得自己数据结构与算法**基础不够扎实**，请[点击这里](https://ke.qq.com/course/package/31104?flowToken=1039500)， 这里包含了**一个程序员 5 年内需要的所有算法知识**。

2. 如果你感觉刷题**太慢**，或者感觉**很困难**，或者**赶时间**，请[点击这里](https://ke.qq.com/course/package/35548?flowToken=1039501)， 这里**用 365 道高频算法题，带你融会贯通算法知识，做到以不变应万变**。

**以上两个链接中的内容，都支持 Java/C++/Python/js/go 五种语言**

除了算法，操作系统也是非常重要的，系统学习操作系统，请[点击这里](http://douma-tech.com/os)，真的是**通俗易懂**，你一学就会的~

