优化版，通过“**开关**”可控制末尾是否不足K个也翻转！
**基本思路**：快慢指针定位局部头尾+利用dummy节点统一处理局部头尾+迭代法翻转链表
**注意**：
1、慢指针slow是局部链表**头节点的前驱节点**，快指针fast是局部链表**尾节点**
2、切开局部链表再装回的时候一定要理清楚如何链入原链表，**该局部链表的前驱**是**上一个**局部链表**翻转之后**的**尾**节点，也即**上一个**局部链表**翻转之前**的**头**节点

* 

```
func reverseKGroup(head *ListNode, k int) *ListNode {
    dummy := &ListNode{}
    dummy.Next = head
    slow, fast := dummy, dummy
    var pre, next *ListNode
    var i int
    for {
        for i=0; i<k; i++ {
            if fast.Next == nil {
                break
            }
            fast = fast.Next
        }

        //以下为开关，打开则不足K个不翻转，关闭则不足K个也翻转
        if i < k {break}
        
        //翻转前用pre保存该局部链表的头，也就是翻转后的尾，用于下一个局部链表的前驱
        pre = slow.Next
        next = fast.Next
        fast.Next = nil
        slow.Next = reverseList(slow.Next)
        if next == nil {
            break
        }
        pre.Next = next
        slow, fast = pre, pre
    }
    return dummy.Next
}

//迭代法翻转链表，空间复杂度为O(1)
func reverseList(head *ListNode) *ListNode {
    var pre, next *ListNode = nil, nil
    for head != nil {
        next = head.Next
        head.Next = pre
        pre = head
        head = next
    }
    return pre
}
```

