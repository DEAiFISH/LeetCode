# 题目

## 49. 字母异位词分组

给你一个字符串数组，请你将 **字母异位词** 组合在一起。可以按任意顺序返回结果列表。

**字母异位词** 是由重新排列源单词的所有字母得到的一个新单词。

# 题目分析

这道题是要对字符串数组中的字符串进行分组，分组依据是字母异位词。即**字符完全相同（不考虑）的字符串为一组**。
字符完全相同的字符串满足两点：
1. 出现的字符种类相同；
2. 每种字符出现的字符相同；

那么我们可以**按字母顺序拼接一个字符串每个字符和出现次数**作为这个字符串的哈希值，字母异位词的字符串的哈希值一定相同。同时由于每个数字都是夹在两个字母之间，不会出现多个数字相连引发歧义的请款阿哥，因此生成的哈希字符串也一定是唯一的。

![image.png](https://pic.leetcode.cn/1690335890-KKBrEF-image.png)

然后我们使用一个哈希表记录每个哈希值和它对应的字符串列表。

<![image.png](https://pic.leetcode.cn/1690336323-TnGkzo-image.png),![image.png](https://pic.leetcode.cn/1690337234-GbtkmX-image.png),![image.png](https://pic.leetcode.cn/1690337252-dRGVsg-image.png),![image.png](https://pic.leetcode.cn/1690337259-xAJUso-image.png),![image.png](https://pic.leetcode.cn/1690337268-DYlnup-image.png),![image.png](https://pic.leetcode.cn/1690337275-UXtQFc-image.png)>

# 代码

由于字符串只包含小写字母，我们可以使用一个长度为`26`的数组即可以统计字符个数，又可以使统计的字符有序。

* []

```java
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        Map<String, List<String>> groups = new HashMap<>();     // 存放字符串哈希值和对应的字符串列表
        String hash;
        // 根据字符串的哈希值进行分组    
        for(String str: strs){
            hash = getStrHash(str);     // 获取字符串的哈希值
            if(!groups.containsKey(hash)){
                groups.put(hash, new ArrayList<>());    // 哈希值不存在，为这个哈希值新建一个列表
            }
            groups.get(hash).add(str);  // 将当前字符串加入hash对应的列表中
        }
        List<List<String>> res = new ArrayList<>();     
        // 分组结果已存在哈希表中，依次遍历加入res中
        for(String key: groups.keySet()){
            res.add(groups.get(key));
        }
        return res;
    }

    /**
     * 生成str的哈希值，由str中每个字符和出现的次数拼接而成。
     * 如字符串str="abcaba"的哈希值为"a3b2c1"
     */
    private String getStrHash(String str){
        // 统计str中出现的字符次数
        int[] counts = new int[26];     
        for(int i = 0; i < str.length(); i++){
            counts[str.charAt(i) - 'a']++;
        }
        // 生成字符串的哈希字符串
        StringBuilder sb = new StringBuilder();
        for(int i = 0; i < 26; i++){
            // 该字符数量不为0，即出现在字符串str中
            if(counts[i] > 0){
                sb.append((char)('a' + i));  // 加入字符
                sb.append(counts[i]);       // 加入字符数量
            }
        }
        return sb.toString();
    }
}
```

* []

```python
class Solution:
    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:
        """
        生成str的哈希值，由str中每个字符和出现的次数拼接而成。
        如字符串str="abcaba"的哈希值为"a3b2c1"
        """
        def get_str_hash(s: str) -> str:
            # 统计str中出现的字符次数
            counts = [0] * 26
            for ch in s:
                counts[ord(ch) - ord('a')] += 1
            # 生成字符串的哈希字符串
            h = ""
            for i, c in enumerate(counts):
                if c > 0:
                    h += f"{chr(ord('a') + i)}{c}"      # 加入字符和字符数量
            return h

        groups = {}     # 存放字符串哈希值和对应的字符串列表
        # 根据字符串的哈希值进行分组
        for s in strs:
            hash_str = get_str_hash(s)  # 获取字符串的哈希值
            if hash_str not in groups:
                groups[hash_str] = []   # 哈希值不存在，为这个哈希值新建一个列表
            groups[hash_str].append(s)  # 将当前字符串加入hash对应的列表中

        return list(groups.values())    # 分组结果已存在哈希表中，返回所有值组成的列表
```

* []

```c++
class Solution {
public:
    vector<vector<string>> groupAnagrams(vector<string>& strs) {
        unordered_map<string,vector<string>> groups;    // 存放字符串哈希值和对应的字符串列表
        string hash;
        // 根据字符串的哈希值进行分组  
        for(auto s: strs){
            hash = getStrHash(s);   // 获取字符串的哈希值
            if(groups.count(hash) == 0){
                vector<string> vet;
                groups[hash] = vet; // 哈希值不存在，为这个哈希值新建一个列表
            }
            groups[hash].push_back(s);  // 将当前字符串加入hash对应的列表中
        }
        vector<vector<string>> res;
        // 分组结果已存在哈希表中，依次遍历加入res中
        for(auto it = groups.begin(); it != groups.end(); it++){
            res.push_back(it->second);
        }
        return res;
    }

    /**
     * 生成str的哈希值，由str中每个字符和出现的次数拼接而成。
     * 如字符串str="abcaba"的哈希值为"a3b2c1"
     */
    string getStrHash(string str){
        // 统计str中出现的字符次数
        int counts[26] = {0};
        for(auto ch: str){
            counts[ch - 'a']++;
        }
        // 生成字符串的哈希字符串
        ostringstream oss;
        for(int i = 0; i < 26; i++){
            // 该字符数量不为0，即出现在字符串str中
            if(counts[i] > 0){
                oss << (char)('a' + i) << counts[i];    // 加入字符和字符数量
            }
        }
        return oss.str();
    }
};
```

