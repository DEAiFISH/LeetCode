### 解题思路

此处撰写解题思路

### 代码

* cpp

```cpp
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseBetween(ListNode* head, int left, int right) {
       ListNode dummy(0, head);
        ListNode* pre = &dummy;
        int i = left - 1;
        // 第一段 不需要反转
        // 寻找反转列表的前一个节点
        while(i--){
            pre = pre->next;
        }

        // 第二段 要反转
        int x = right - left + 1;// 反转几个节点
        ListNode *tail = pre->next; //反转前列表的头 就是 反转列表后的尾节点
        ListNode *new_head = pre->next;// 反转前列表的头
        while(x--){
            ListNode *next = new_head->next;//暂存
                // pre 头插法
                new_head->next = pre->next;
                pre->next = new_head;
            new_head = next; 
        }

        // 第三段不需要反转
        tail->next = new_head;

       return dummy.next;
    }
};
```

