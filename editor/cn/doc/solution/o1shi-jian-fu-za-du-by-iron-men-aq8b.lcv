* 

```
// 执行用时：0 ms, 在所有 Java 提交中击败了100.00%的用户
// 内存消耗：35.8 MB, 在所有 Java 提交中击败了93.46%的用户
class Solution {
    public ListNode reverseBetween(ListNode head, int left, int right) {
        if(head == null || left == right){
            return head;
        }

        ListNode h = head;
        int index = 0;
        ListNode pre = null; // 用于翻转链表
        ListNode next; // 用于翻转链表
        ListNode start = null, end = null; // 翻转前的头结点，翻转前的尾结点
        ListNode l = head, r = null; // 翻转前的头结点的前驱， 翻转前的尾结点的后继
        while(h != null){
            index++; // 记录到达第几个结点
            if(index >= left && index <= right){ // 在指定范围内的结点进行翻转
                if(index == left){ // 翻转前的头结点
                    start = h;
                }else if(index == right){ // 翻转前的尾结点
                    end = h;
                    r = h.next; // 翻转前的尾结点的后继
                }

                next = h.next;
                h.next = pre;
                pre = h;
                h = next; 
                continue;
            }else if(index == left - 1){ // 翻转前的头结点的前驱
                l = h;
            }
            h = h.next;
        }

        if(left == 1){ // 左边界是链表开头
            start.next = r;
            return end;
        }else if(right == index){ // 有边界是链表结尾
            l.next = end;
            return head;
        }else{ // 左右边界都在链表内部
            l.next = end;
            start.next = r;
            return head;
        }
    }
}
```

