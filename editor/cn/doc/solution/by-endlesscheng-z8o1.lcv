根据题意，我们可以把 $s$ 看成是由「$1$ 组」和「$2$ 组」交替组成的，重点在于每组内的数字是一个还是两个，这可以从 $s$ 自身上知道。

下面的 PPT 动画演示了从 $s$ 的前三位 $122$ 开始，构造 $s$ 的过程：

<![481-4.png](https://pic.leetcode.cn/1667050625-eshwIW-481-4.png),![481-5.png](https://pic.leetcode.cn/1667050625-eIcehP-481-5.png),![481-6.png](https://pic.leetcode.cn/1667050625-DAnYjU-481-6.png),![481-7.png](https://pic.leetcode.cn/1667050625-fWotuQ-481-7.png),![481-8.png](https://pic.leetcode.cn/1667050625-CrwOsy-481-8.png),![481-9.png](https://pic.leetcode.cn/1667050987-vxGLRh-481-9.png),![481-10.png](https://pic.leetcode.cn/1667050987-quhZmb-481-10.png)>

构造到 $s$ 的长度达到 $n$ 时停止。

注意最后一次构造可能会填入两个数，导致 $s$ 的长度为 $n+1$，因此最后统计 $1$ 的个数时，应统计 $s$ 的前 $n$ 个数，而不是整个 $s$。

* [sol1-Python3]

```py
class Solution:
    def magicalString(self, n: int) -> int:
        s = [1, 2, 2]
        i = 2
        while len(s) < n:
            s += [s[-1] ^ 3] * s[i]  # 1^3=2, 2^3=1，这样就能在 1 和 2 之间转换
            i += 1
        return s[:n].count(1)
```

* [sol1-Java]

```java
class Solution {
    public int magicalString(int n) {
        char[] s = new char[n + 2];
        s[0] = 1; s[1] = s[2] = 2;
        char c = 2;
        for (int i = 2, j = 3; j < n; ++i) {
            c ^= 3; // 1^3=2, 2^3=1，这样就能在 1 和 2 之间转换
            s[j++] = c;
            if (s[i] == 2) s[j++] = c;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) ans += 2 - s[i]; // 2-1=1，2-2=0，这样就只统计了 1
        return ans;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int magicalString(int n) {
        string s = "\1\2\2"; // 值就是 1,2,2，这样就可以直接用 s[i] 当作个数
        for (int i = 2; s.length() < n; ++i)
            s += string(s[i], s.back() ^ 3); // 1^3=2, 2^3=1，这样就能在 1 和 2 之间转换
        return count(s.begin(), s.begin() + n, 1);
    }
};
```

* [sol1-Go]

```go
func magicalString(n int) int {
	s := make([]byte, 0, n+1)
	s = append(s, 1, 2, 2)
	c := []byte{2}
	for i := 2; len(s) < n; i++ {
		c[0] ^= 3 // 1^3=2, 2^3=1，这样就能在 1 和 2 之间转换
		s = append(s, bytes.Repeat(c, int(s[i]))...)
	}
	return bytes.Count(s[:n], []byte{1})
}
```

还可以直接构造出一个长度至少为 $10^5$ 的 $s$，并求出每个前缀中 $1$ 的个数，存到 $\textit{acc}$ 数组中，这样就不用每次都生成并统计了，直接返回 $\textit{acc}[n]$。

* [sol2-Python3]

```py
s = [1, 2, 2]
i = 2
while len(s) < 100000:
    s += [s[-1] ^ 3] * s[i]  # 1^3=2, 2^3=1，这样就能在 1 和 2 之间转换
    i += 1
acc = list(accumulate((2 - c for c in s), initial=0))  # 2-1=1，2-2=0，这样就只统计了 1

class Solution:
    def magicalString(self, n: int) -> int:
        return acc[n]
```

* [sol2-Java]

```java
class Solution {
    private static final int MX = (int) 1e5;
    private static final int[] acc = new int[MX + 1];

    static {
        char[] s = new char[MX + 1];
        s[0] = 1; s[1] = s[2] = 2;
        char c = 2;
        for (int i = 2, j = 3; j < MX; ++i) {
            c ^= 3; // 1^3=2, 2^3=1，这样就能在 1 和 2 之间转换
            s[j++] = c;
            if (s[i] == 2) s[j++] = c;
        }
        for (int i = 0; i < MX; ++i)
            acc[i + 1] = acc[i] + 2 - s[i]; // 2-1=1，2-2=0，这样就只统计了 1
    }

    public int magicalString(int n) {
        return acc[n];
    }
}
```

* [sol2-C++]

```cpp
const int MX = 1e5;
int acc[MX + 1];

int init = []() {
    string s = "\1\2\2";
    for (int i = 2; s.length() < MX; ++i)
        s += string(s[i], s.back() ^ 3); // 1^3=2, 2^3=1，这样就能在 1 和 2 之间转换
    for (int i = 0; i < MX; ++i)
        acc[i + 1] = acc[i] + 2 - s[i]; // 2-1=1，2-2=0，这样就只统计了 1
    return 0;
}();

class Solution {
public:
    int magicalString(int n) {
        return acc[n];
    }
};
```

* [sol2-Go]

```go
const mx int = 1e5
var acc [mx + 1]int

func init() {
	s := make([]byte, 0, mx+1)
	s = append(s, 1, 2, 2)
	c := []byte{2}
	for i := 2; len(s) < mx; i++ {
		c[0] ^= 3 // 1^3=2, 2^3=1，这样就能在 1 和 2 之间转换
		s = append(s, bytes.Repeat(c, int(s[i]))...)
	}
	for i := 0; i < mx; i++ {
		acc[i+1] = acc[i] + int(2-s[i]) // 2-1=1，2-2=0，这样就只统计了 1
	}
}

func magicalString(n int) int {
	return acc[n]
}
```

#### 复杂度分析

- 时间复杂度：$O(n)$。如果提前构造好 $\textit{acc}$ 数组，则时间复杂度为 $O(1)$。
- 空间复杂度：$O(n)$。

---

欢迎关注我的B站频道：[灵茶山艾府](https://space.bilibili.com/206214)，每周更新算法讲解视频哦~
