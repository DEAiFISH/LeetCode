### 标题指引

本文一共会介绍四种思路，可按需食用。

- 方法1 哈希集合（最普遍也最简单的思路，必须掌握）
- 方法2 哈希表（思路1的进阶）
- 方法3 动态规划（极其巧妙，推荐掌握）
- 方法4 并查集（建议掌握）

> 此题为大厂面试高频手撕题，希望大家能重视这道题。

### 题目分析

看到本题找最长连续序列，每个人都会想到两种最朴素的解法之一：
1. 先排序，从前往后找最长连续上升序列即可。该思路简单有效，但是复杂度已经至少有$O(nlogn)$。实现起来也比较简单，在此不讨论该解法。
2. 遍历数组中的每个元素num，然后以num为起点，每次+1向后遍历num+1,num+2,num+3...，判断这些元素是否存在于数组中。假设找到的最大的连续存在的元素为num+x，那么这个连续序列的长度即为x+1。最后将每个num所开始序列长度取个最大值即可。
   这个思路很通俗易懂，实现成代码，如下所示：

> 该代码不是重点，看不看无所谓。

* java

```java
class Solution {
    public int longestConsecutive(int[] nums) {
        int n = nums.length;
        int ans = 0;
        // 遍历数组中的每个元素num
        for (int i = 0; i < n; i++) {
            // 以num为起点，每次+1向后遍历num+1,num+2,num+3...
            int cur = nums[i] + 1;
            while (true) {
                // 标识是否在数组中找到了cur
                boolean flag = false;
                // 在数组中找cur
                for (int j = 0; j < n; j++) {
                    if (nums[j] == cur) {
                        flag = true;
                        break;
                    }
                }
                if (!flag) {
                    break;
                }
                cur += 1;
            }
            ans = Math.max(ans, cur - nums[i]);
        }
        return ans;
    }
}
```

### 解题思路1：哈希集合

上面的代码不用想，是肯定超时的。它的最坏时间复杂度已经达到了$O(n^3)$，我们需要优化代码。优化的点主要有两个：
（1）判断num+1，num+2，num+3...是否在数组中。上面的代码是用直接遍历的方式去查找的，时间复杂度为$O(n)$，我们可以改为哈希表查找，时间复杂度为$O(1)$。
（2）遍历数组中每个元素num。逐一遍历每个元素会产生很多冗余工作，实际上我们无需一次针对每个元素num去判断num+1，num+2，num+3...是否在数组中。如果num-1已经在数组中的话，那么num-1肯定会进行相应的+1遍历，然后遍历到num，而且从num-1开始的+1遍历必定比从num开始的+1遍历得到的序列长度更长。因此，我们便可将在一个连续序列中的元素进行删减，让其只在最小的元素才开始+1遍历。比如，现有元素[1,2,4,3,5]，当2,3,4,5发现均有比自己小1的元素存在，那么它们就不会开始+1遍历，而1是连续序列中最小的元素，没有比自己小1的元素存在，所以会开始+1遍历。通过上述方式便可将时间复杂度优化至O(n)。

### 代码1

* java

```java
class Solution {
    public int longestConsecutive(int[] nums) {
        // 建立一个存储所有数的哈希表，同时起到去重功能
        Set<Integer> set = new HashSet<>();
        for (int num : nums) {
            set.add(num);
        }

        int ans = 0;
        // 遍历去重后的所有数字
        for (int num : set) {
            int cur = num;
            // 只有当num-1不存在时，才开始向后遍历num+1，num+2，num+3......
            if (!set.contains(cur - 1)) {
                while (set.contains(cur + 1)) {
                    cur++;
                }
            }
            // [num, cur]之间是连续的，数字有cur - num + 1个
            ans = Math.max(ans, cur - num + 1);
        }
        return ans;
    }
}
```

> 注意：上述代码虽然有两层循环for+while，但是由于`if (!set.contains(cur - 1))`判断的存在，每个元素只会被遍历一次，因此时间复杂度也为O(n)。

上面是一种朴素思路的优化方法，下面再介绍三种算法，分别为：
1. 使用哈希表记录当前num能到达的连续最右边界；
2. 使用哈希表记录当前值所在的连续最大区间（动态规划）
3. 并查集

### 解题思路2：哈希表记录右边界

这种方法其实也是思路1的变种，用于减少遍历次数。做法是建立一个哈希表，记录每个元素num能够连续到达的右边界，这样在内层循环遍历到一个新元素时，无需经过多次+1「遍历+判断」才能到达右边界，直接取值即可。

### 代码2

* java

```java
class Solution {
    public int longestConsecutive(int[] nums) {
        // key表示num，value表示num最远到达的连续右边界
        Map<Integer, Integer> map = new HashMap<>();
        // 初始化每个num的右边界为自己
        for (int num : nums) {
            map.put(num, num);
        }

        int ans = 0;
        for (int num : nums) {
            if (!map.containsKey(num - 1)) {
                int right = map.get(num);
                // 遍历得到最远的右边界
                while (map.containsKey(right + 1)) {
                    right = map.get(right + 1);
                }
                // 更新右边界
                map.put(num, right);
                // 更新答案
                ans = Math.max(ans, right - num + 1);
            }
            
        }
        return ans;
    }
}
```

> 之前本思路给出的代码出现了某些问题，现已修正。感谢评论区大佬[@yan-shan](/u/yan-shan/)指出错误。

### 解题思路3：哈希表记录连续区间长度（动态规划）

这是一种非常巧妙的做法，与思路2相同的一点是也利用了Map减小遍历次数。但很重要的一点不同是其value表示的是num所在的连续区间长度。举个例子，当Map的key为5，value为3时，这就表明当前有一个包含5且长度为3的连续区间，当然有多种可能，可以是[3,5],[4,6],[5,7]。

具体做法是：
1. 遍历nums数组中的所有数字num
2. 当num是第一次出现时：
   （1）分别获取到左相邻数字num-1的连续区间长度left和右相邻数字num+1的连续区间长度right；
   （2）计算得到当前的区间长度为$curLen=left+right+1$；
   （3）更新最长区间长度ans以及左右边界的区间长度。

如果不理解这样做的原因，可以先看一遍代码，再看我的后续解释。

### 代码3

* java

```java
class Solution {
    public int longestConsecutive(int[] nums) {
        // key表示num，value表示num所在连续区间的长度
        Map<Integer, Integer> map = new HashMap<>();
        int ans = 0;
        for (int num : nums) {
            // 当map中不包含num，也就是num第一次出现
            if (!map.containsKey(num)) {
                // left为num-1所在连续区间的长度，更进一步理解为：左连续区间的长度
                int left = map.getOrDefault(num - 1, 0);
                // right为num+1所在连续区间的长度，更进一步理解为：右连续区间的长度
                int right = map.getOrDefault(num + 1, 0);
                // 当前连续区间的总长度
                int curLen = left + right + 1;
                ans = Math.max(ans, curLen);
                // 将num加入map中，表示已经遍历过该值。其对应的value可以为任意值。
                map.put(num, -1);
                // 更新当前连续区间左边界和右边界对应的区间长度
                map.put(num - left, curLen);
                map.put(num + right, curLen);
            }
        }
        return ans;
    }
}
```

**继续分析：**

在代码中的left和right能够分别代表num-1的左连续区间的长度和num+1的右连续区间长度，那么为什么map中的value能够时而表示左区间的长度，时而表示右区间的长度呢？

关键在于判断条件上：`if (!map.containsKey(num))`，这行代码表示num之前并未出现过。那么对于key=num-1来说，它的value表示的区间就只能是[num-value,num-1]，num-1只能是该区间的左边界值，而其它可能的连续区间都会包含num，不符合上述条件；同理，对于key=num+1来说，它的value表示的区间就只能是[num+1,num+value]，num+1只能是该区间的右边界值。

当num已经出现了，这两个区间就可以被联通表示为[num-value1,num+value2]，当前连续区间的左右边界会发生变化，变为num-value1和num+value2，因此我们需要更新这两个边界点对应的区间长度。

所以说这种方法是很巧妙的！也非常值得我们学习。

本方法借鉴于[【动态规划】Python 题解](https://leetcode-cn.com/problems/longest-consecutive-sequence/solution/dong-tai-gui-hua-python-ti-jie-by-jalan/)及其评论区。

### 解题思路4：并查集

并查集的思路实际上与思路2有点像，也是来记录右边界的，所有在一个连续区间内的元素都会在一个连通分量中，且这些元素的根结点都为最远的右边界元素。
具体思路是：
1. 遍历所有元素num，如果num+1存在，将num加入到num+1所在的连通分量中；
2. 重新遍历一遍所有元素num，通过find函数找到num所在分量的根结点，也就是最远右边界，从而求得连续区间的长度。

### 代码4

* java

```java
class UnionFind {
    // 记录每个节点的父节点
    private Map<Integer, Integer> parent;

    public UnionFind(int[] nums) {
        parent = new HashMap<>();
        // 初始化父节点为自身
        for (int num : nums) {
            parent.put(num, num);
        }
    }

    // 寻找x的父节点，实际上也就是x的最远连续右边界，这点类似于方法2
    public Integer find(int x) {
        // nums不包含x
        if (!parent.containsKey(x)) {
            return null;
        }
        // 遍历找到x的父节点
        while (x != parent.get(x)) {
            // 进行路径压缩，不写下面这行也可以，但是时间会慢些
            parent.put(x, parent.get(parent.get(x)));
            x = parent.get(x);
        }
        return x;
    }

    // 合并两个连通分量，在本题中只用来将num并入到num+1的连续区间中
    public void union(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX == rootY) {
            return;
        }
        parent.put(rootX, rootY);
    }
}

class Solution {
    public int longestConsecutive(int[] nums) {
        UnionFind uf = new UnionFind(nums);
        int ans = 0;
        
        for (int num : nums) {
            // 当num+1存在，将num合并到num+1所在集合中
            if (uf.find(num + 1) != null) {
                uf.union(num, num + 1);
            }
        }

        for (int num : nums) {
            // 找到num的最远连续右边界
            int right = uf.find(num);
            ans = Math.max(ans, right - num + 1);
        }
        return ans;
    }
}
```

最后再附上一版并查集的代码，思路与上面相同，但是加入了一个count哈希表，用于记录每个连通分量的节点个数，这样可在主函数一次遍历便可得到答案。

### 代码5

* java

```java
class UnionFind {
    // 记录每个节点的父节点
    private Map<Integer, Integer> parent;
    // 记录节点所在连通分量的节点个数
    private Map<Integer, Integer> count;

    public UnionFind(int[] nums) {
        parent = new HashMap<>();
        count = new HashMap<>();
        // 初始化父节点为自身
        for (int num : nums) {
            parent.put(num, num);
            count.put(num, 1);
        }
    }

    // 寻找x的父节点，实际上也就是x的最远连续右边界
    public Integer find(int x) {
        if (!parent.containsKey(x)) {
            return null;
        }
        // 遍历找到x的父节点
        while (x != parent.get(x)) {
            // 进行路径压缩
            parent.put(x, parent.get(parent.get(x)));
            x = parent.get(x);
        }
        return x;
    }

    // 合并两个连通分量，用来将num并入到num+1的连续区间中
    // 返回值为x所在连通分量的节点个数
    public int union(int x, int y) {
        int rootX = find(x);
        int rootY = find(y);
        if (rootX == rootY) {
            return count.get(rootX);
        }
        parent.put(rootX, rootY);
        // 更新该根结点连通分量的节点个数
        count.put(rootY, count.get(rootX) + count.get(rootY));
        return count.get(rootY);
    }
}
class Solution {
    public int longestConsecutive(int[] nums) {
        // 去除nums为空的特例
        if (nums == null || nums.length == 0) {
            return 0;
        }
        UnionFind uf = new UnionFind(nums);
        int ans = 1;
        // 一次遍历即可
        for (int num : nums) {
            if (uf.find(num + 1) != null) {
                // union会返回num所在连通分量的节点个数
                ans = Math.max(ans, uf.union(num, num + 1));
            }
        }
        
        return ans;
    }
}
```

这就是我所整理到的四种解法，个人推荐大家可以都了解一下这四种解法，拓展自己解题的思维广度。

如本文有错误之处或者您有不理解的地方，欢迎在评论区指出，我会及时回复！同时如果本文对您有帮助的话，请帮忙点个赞，非常感谢🙏！
