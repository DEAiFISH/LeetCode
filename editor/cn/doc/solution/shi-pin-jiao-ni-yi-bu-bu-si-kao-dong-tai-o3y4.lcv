# 视频讲解

[【基础算法精讲 21】](https://www.bilibili.com/video/BV1ho4y1W7QK/)。如果这个视频对你有帮助，欢迎一键三连！

> APP 用户需要分享到 wx 打开链接。

# 一、递归搜索 + 保存计算结果 = 记忆化搜索

* [sol1-Python3]

```py
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        @cache
        def dfs(i: int, hold: bool) -> int:
            if i < 0:
                return -inf if hold else 0
            if hold:
                return max(dfs(i - 1, True), dfs(i - 1, False) - prices[i])
            return max(dfs(i - 1, False), dfs(i - 1, True) + prices[i])
        return dfs(n - 1, False)
```

* [sol1-Java]

```java
class Solution {
    private int[] prices;
    private int[][] memo;

    public int maxProfit(int[] prices) {
        this.prices = prices;
        int n = prices.length;
        memo = new int[n][2];
        for (int i = 0; i < n; i++)
            Arrays.fill(memo[i], -1); // -1 表示还没有计算过
        return dfs(n - 1, 0);
    }

    private int dfs(int i, int hold) {
        if (i < 0) return hold == 1 ? Integer.MIN_VALUE : 0;
        if (memo[i][hold] != -1) return memo[i][hold];
        if (hold == 1)
            return memo[i][hold] = Math.max(dfs(i - 1, 1), dfs(i - 1, 0) - prices[i]);
        return memo[i][hold] = Math.max(dfs(i - 1, 0), dfs(i - 1, 1) + prices[i]);
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int n = prices.size(), memo[n][2];
        memset(memo, -1, sizeof(memo)); // -1 表示还没有计算过
        function<int(int, bool)> dfs = [&](int i, bool hold) -> int {
            if (i < 0) return hold ? INT_MIN : 0;
            int &res = memo[i][hold];
            if (res != -1) return res;
            if (hold) return res = max(dfs(i - 1, true), dfs(i - 1, false) - prices[i]);
            return res = max(dfs(i - 1, false), dfs(i - 1, true) + prices[i]);
        };
        return dfs(n - 1, false);
    }
};
```

* [sol1-Go]

```go
func maxProfit(prices []int) int {
    n := len(prices)
    memo := make([][2]int, n)
    for i := range memo {
        memo[i] = [2]int{-1, -1} // -1 表示还没有计算过
    }
    var dfs func(int, int) int
    dfs = func(i, hold int) (res int) {
        if i < 0 {
            if hold == 1 {
                return math.MinInt
            }
            return
        }
        p := &memo[i][hold]
        if *p != -1 {
            return *p
        }
        defer func() { *p = res }()
        if hold == 1 {
            return max(dfs(i-1, 1), dfs(i-1, 0)-prices[i])
        }
        return max(dfs(i-1, 0), dfs(i-1, 1)+prices[i])
    }
    return dfs(n-1, 0)
}

func max(a, b int) int { if a < b { return b }; return a }
```

### 复杂度分析

- 时间复杂度：$O(n)$，其中 $n$ 为 $\textit{prices}$ 的长度。
- 空间复杂度：$O(n)$。

# 二、1:1 翻译成递推

* [sol2-Python3]

```py
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        n = len(prices)
        f = [[0] * 2 for _ in range(n + 1)]
        f[0][1] = -inf
        for i, p in enumerate(prices):
            f[i + 1][0] = max(f[i][0], f[i][1] + p)
            f[i + 1][1] = max(f[i][1], f[i][0] - p)
        return f[n][0]
```

* [sol2-Java]

```java
class Solution {
    public int maxProfit(int[] prices) {
        int n = prices.length;
        int[][] f = new int[n + 1][2];
        f[0][1] = Integer.MIN_VALUE;
        for (int i = 0; i < n; ++i) {
            f[i + 1][0] = Math.max(f[i][0], f[i][1] + prices[i]);
            f[i + 1][1] = Math.max(f[i][1], f[i][0] - prices[i]);
        }
        return f[n][0];
    }
}
```

* [sol2-C++]

```cpp
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int n = prices.size(), f[n + 1][2];
        memset(f, 0, sizeof(f));
        f[0][1] = INT_MIN;
        for (int i = 0; i < n; ++i) {
            f[i + 1][0] = max(f[i][0], f[i][1] + prices[i]);
            f[i + 1][1] = max(f[i][1], f[i][0] - prices[i]);
        }
        return f[n][0];
    }
};
```

* [sol2-Go]

```go
func maxProfit(prices []int) int {
    n := len(prices)
    f := make([][2]int, n+1)
    f[0][1] = math.MinInt
    for i, p := range prices {
        f[i+1][0] = max(f[i][0], f[i][1]+p)
        f[i+1][1] = max(f[i][1], f[i][0]-p)
    }
    return f[n][0]
}

func max(a, b int) int { if a < b { return b }; return a }
```

### 复杂度分析

- 时间复杂度：$O(n)$，其中 $n$ 为 $\textit{prices}$ 的长度。
- 空间复杂度：$O(n)$。

# 三、空间优化

* [sol3-Python3]

```py
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        f0, f1 = 0, -inf
        for p in prices:
            f0, f1 = max(f0, f1 + p), max(f1, f0 - p)
        return f0
```

* [sol3-Java]

```java
class Solution {
    public int maxProfit(int[] prices) {
        int f0 = 0, f1 = Integer.MIN_VALUE;
        for (int p : prices) {
            int newF0 = Math.max(f0, f1 + p);
            f1 = Math.max(f1, f0 - p);
            f0 = newF0;
        }
        return f0;
    }
}
```

* [sol3-C++]

```cpp
class Solution {
public:
    int maxProfit(vector<int> &prices) {
        int f0 = 0, f1 = INT_MIN;
        for (int p: prices) {
            int new_f0 = max(f0, f1 + p);
            f1 = max(f1, f0 - p);
            f0 = new_f0;
        }
        return f0;
    }
};
```

* [sol3-Go]

```go
func maxProfit(prices []int) int {
    f0, f1 := 0, math.MinInt
    for _, p := range prices {
        f0, f1 = max(f0, f1+p), max(f1, f0-p)
    }
    return f0
}

func max(a, b int) int { if a < b { return b }; return a }
```

### 复杂度分析

- 时间复杂度：$O(n)$，其中 $n$ 为 $\textit{prices}$ 的长度。
- 空间复杂度：$O(1)$。仅用到若干额外变量。

