### 题目描述

给定一个字符串数组，将字母异位词组合在一起。字母异位词指字母相同，但排列不同的字符串。

### 思路解析

#### 方法一：排序

字母相同，但排列不同的字符串，排序后都一定是相同的。因为每种字母的个数都是相同的，那么排序后的字符串就一定是相同的。

这里可以利用 stream 的 `groupingBy` 算子实现直接返回结果：

* java

```java
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        return new ArrayList<>(Arrays.stream(strs)
            .collect(Collectors.groupingBy(str -> {
                // 返回 str 排序后的结果。
                // 按排序后的结果来grouping by，算子类似于 sql 里的 group by。
                char[] array = str.toCharArray();
                Arrays.sort(array);
                return new String(array);
            })).values());
    }
}
```

注意 `groupingBy` 算子计算完以后，返回的是一个 `Map<String, List<String>>`，`map` 的键是每种排序后的字符串，值是聚合的原始字符串，我们只关心值，所以我们最后 `new ArrayList<>(map.values())`。

#### 方法一之狂拽炫技

其实这里由于需要计算排序后的字符串，导致使用了多行代码，为了狂 (sang) 拽 (xin) 炫 (bing) 技 (kuang)，还可以利用 stream 对字符串排序，这样只需要一行代码即可。代码如下：

* []

```Java
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        // str -> intstream -> sort -> collect by StringBuilder
        return new ArrayList<>(Arrays.stream(strs).collect(Collectors.groupingBy(str -> str.chars().sorted().collect(StringBuilder::new, StringBuilder::appendCodePoint, StringBuilder::append).toString())).values());
    }
}
```

还有一种写法，不过由于会 `split` 字符串，会慢很多（但是短啊！）：

* []

```Java
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        // str -> split -> stream -> sort -> join
        return new ArrayList<>(Arrays.stream(strs).collect(Collectors.groupingBy(str -> Stream.of(str.split("")).sorted().collect(Collectors.joining()))).values());
    }
}
```

设 n 是数组长度，k 是字符串最大长度。

时间复杂度：$O(nk\log k)$。每个字符串排序，时间复杂度 $O(k\log k)$，排序 n 个，就是 $O(nk\log k)$。`groupingBy` 的时间复杂度是 $O(n)$ 的，所以整体是 $O(nk\log k)$。
空间复杂度： $O(nk)$。 `groupingBy` 后产生的 `HashMap` 会存所有的字符串。

---

#### 方法二：计数

对每个字符串计数得到该字符串的计数数组，对于计数数组相同的字符串，就互为异位词。
因为数组类型没有重写 `hashcode()` 和 `equals()` 方法，因此不能直接作为 HashMap 的 Key 进行聚合，那么我们就 **把这个数组手动编码变成字符串就行了**。
比如将 `[b,a,a,a,b,c]` 编码成 `a3b2c1`，使用编码后的字符串作为 HashMap 的 Key 进行聚合。

* []

```Java
class Solution {
    public List<List<String>> groupAnagrams(String[] strs) {
        return new ArrayList<>(Arrays.stream(strs)
            .collect(Collectors.groupingBy(str -> {
                int[] counter = new int[26];
                for (int i = 0; i < str.length(); i++) {
                    counter[str.charAt(i) - 'a']++;
                }
                StringBuilder sb = new StringBuilder();
                for (int i = 0; i < 26; i++) {
                    // 这里的 if 是可省略的，但是加上 if 以后，生成的 sb 更短，后续 groupingBy 会更快。
                    if (counter[i] != 0) {
                        sb.append((char) ('a' + i));
                        sb.append(counter[i]);
                    }
                }
                return sb.toString();
            })).values());
    }
}
```

设 n 是数组长度，k 是字符串最大长度。

时间复杂度：$O(nk)$。每个字符串计数再编码，由于题目说明是小写字母，所以是 $O(n(k + 26))$，常数忽略后就是 $O(nk)$。
空间复杂度： $O(nk)$。 `groupingBy` 后产生的 `HashMap` 会存所有的字符串。

